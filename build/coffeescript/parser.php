<?php
namespace CoffeeScript;
use \ArrayAccess as ArrayAccess;
/* Driver template for the PHP_ParserGenerator parser generator. (PHP port of LEMON)
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 2 "/srv/http/coffeescript-php/src/grammar.y"
 class Parser #line 102 "/srv/http/coffeescript-php/src/grammar.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const YY_POST_IF                     =  1;
    const YY_IF                          =  2;
    const YY_ELSE                        =  3;
    const YY_FOR                         =  4;
    const YY_DO                          =  5;
    const YY_WHILE                       =  6;
    const YY_UNTIL                       =  7;
    const YY_LOOP                        =  8;
    const YY_SUPER                       =  9;
    const YY_CLASS                       = 10;
    const YY_FORIN                       = 11;
    const YY_FOROF                       = 12;
    const YY_BY                          = 13;
    const YY_WHEN                        = 14;
    const YY_EQUALS                      = 15;
    const YY_COLON                       = 16;
    const YY_COMPOUND_ASSIGN             = 17;
    const YY_RETURN                      = 18;
    const YY_THROW                       = 19;
    const YY_EXTENDS                     = 20;
    const YY_INDENT                      = 21;
    const YY_OUTDENT                     = 22;
    const YY_LOGIC                       = 23;
    const YY_COMPARE                     = 24;
    const YY_RELATION                    = 25;
    const YY_SHIFT                       = 26;
    const YY_PLUS                        = 27;
    const YY_MINUS                       = 28;
    const YY_UNARY                       = 29;
    const YY_EXISTENTIAL                 = 30;
    const YY_INCREMENT                   = 31;
    const YY_DECREMENT                   = 32;
    const YY_CALL_START                  = 33;
    const YY_CALL_END                    = 34;
    const YY_ACCESSOR                    = 35;
    const YY_EXISTENTIAL_ACCESSOR        = 36;
    const YY_PROTOTYPE                   = 37;
    const YY_TERMINATOR                  = 38;
    const YY_STATEMENT                   = 39;
    const YY_IDENTIFIER                  = 40;
    const YY_NUMBER                      = 41;
    const YY_STRING                      = 42;
    const YY_JS                          = 43;
    const YY_REGEX                       = 44;
    const YY_BOOL                        = 45;
    const YY_HERECOMMENT                 = 46;
    const YY_PARAM_START                 = 47;
    const YY_PARAM_END                   = 48;
    const YY_FUNC                        = 49;
    const YY_BOUND_FUNC                  = 50;
    const YY_COMMA                       = 51;
    const YY_ELLIPSIS                    = 52;
    const YY_RANGE_EXCLUSIVE             = 53;
    const YY_INDEX_START                 = 54;
    const YY_INDEX_END                   = 55;
    const YY_INDEX_SOAK                  = 56;
    const YY_INDEX_PROTO                 = 57;
    const YY_OBJECT_START                = 58;
    const YY_OBJECT_END                  = 59;
    const YY_FUNC_EXIST                  = 60;
    const YY_THIS                        = 61;
    const YY_AMPERSAND                   = 62;
    const YY_ARRAY_START                 = 63;
    const YY_ARRAY_END                   = 64;
    const YY_RANGE_INCLUSIVE             = 65;
    const YY_TRY                         = 66;
    const YY_FINALLY                     = 67;
    const YY_CATCH                       = 68;
    const YY_PAREN_START                 = 69;
    const YY_PAREN_END                   = 70;
    const YY_OWN                         = 71;
    const YY_SWITCH                      = 72;
    const YY_LEADING_WHEN                = 73;
    const YY_MATH                        = 74;
    const YY_NO_ACTION = 513;
    const YY_ACCEPT_ACTION = 512;
    const YY_ERROR_ACTION = 511;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 4427;
static public $yy_action = array(
 /*     0 */   512,  186,  180,  292,   95,  119,  221,  224,  227,   75,
 /*    10 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*    20 */   316,  188,  260,  177,   53,  271,  309,   66,  144,   24,
 /*    30 */    34,   25,  283,  257,   20,  165,  281,  256,  248,  251,
 /*    40 */    39,   28,   49,   27,   42,   35,   30,  276,  281,   13,
 /*    50 */   159,  290,  156,  135,  201,  134,  194,  135,   67,  183,
 /*    60 */    83,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*    70 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*    80 */    40,  270,  309,   45,  144,  128,  129,    6,  283,  257,
 /*    90 */   302,  165,   40,  256,  248,  251,   35,   30,   21,  281,
 /*   100 */   243,  147,  201,  310,  194,  135,  159,  290,  156,  135,
 /*   110 */   275,    6,  242,  239,  211,  183,   83,  117,  221,  224,
 /*   120 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*   130 */   205,  207,  316,  188,  260,  177,  241,   33,  309,  160,
 /*   140 */   144,   47,  317,   40,  283,  257,  302,  165,  238,  256,
 /*   150 */   248,  251,  293,  175,  193,  208,    6,  145,  201,  310,
 /*   160 */   194,  135,  159,  290,  156,  135,  285,   52,  284,  135,
 /*   170 */   264,  183,   72,  117,  221,  224,  227,   75,   76,  230,
 /*   180 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*   190 */   260,  177,  266,  211,  309,   18,  144,  267,   32,  223,
 /*   200 */   283,  257,  302,  165,  294,  256,  248,  251,    4,  307,
 /*   210 */   306,   61,  274,  148,    1,  310,    2,  265,  159,  290,
 /*   220 */   156,  135,   29,   48,   70,    9,  161,  183,   83,  117,
 /*   230 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*   240 */   199,  200,  205,  207,  316,  188,  260,  177,  181,   79,
 /*   250 */   309,  303,  144,  157,  154,   13,  283,  257,  302,  165,
 /*   260 */   132,  256,  248,  251,   13,  201,   15,  194,  135,  148,
 /*   270 */   201,  310,  194,  135,  159,  290,  156,  135,  130,  261,
 /*   280 */   131,  261,  263,  183,   83,  117,  221,  224,  227,   75,
 /*   290 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*   300 */   316,  188,  260,  177,  301,  313,  309,  291,  144,    4,
 /*   310 */   314,  211,  283,  257,  302,  165,  268,  256,  248,  251,
 /*   320 */    42,   35,   30,   13,  281,  151,    9,  310,  259,   61,
 /*   330 */   159,  290,  156,  135,    3,   17,  272,  269,  184,  183,
 /*   340 */   176,  254,  292,   95,  119,  221,  224,  227,   75,   76,
 /*   350 */   230,  234,  246,  204,  203,  199,  200,  205,  207,  316,
 /*   360 */   188,  260,  177,   14,  216,  309,  158,  144,   40,   23,
 /*   370 */    26,  283,  257,  297,  165,  218,  256,  248,  251,   28,
 /*   380 */    49,   27,   42,   35,   30,  273,  281,  280,  136,  159,
 /*   390 */   290,  156,  135,  182,  262,  139,  252,  172,  183,  292,
 /*   400 */    95,  119,  221,  224,  227,   75,   76,  230,  234,  246,
 /*   410 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*   420 */   214,  185,  309,  300,  144,  249,   10,  295,  283,  257,
 /*   430 */    40,  165,  150,  256,  248,  251,   14,    4,   28,   49,
 /*   440 */    27,   42,   35,   30,  168,  281,  159,  290,  156,  135,
 /*   450 */   312,  258,  166,   65,    9,  183,  169,   83,  117,  221,
 /*   460 */   224,  227,   75,   76,  230,  234,  246,  204,  203,  199,
 /*   470 */   200,  205,  207,  316,  188,  260,  177,  167,  171,  309,
 /*   480 */   228,  144,  178,  170,  289,  283,  257,  302,  165,   40,
 /*   490 */   256,  248,  251,  331,  244,  331,   62,  331,  229,  240,
 /*   500 */   304,  152,   14,  159,  290,  156,  135,  331,  331,  331,
 /*   510 */   331,  331,  183,   64,   83,  117,  221,  224,  227,   75,
 /*   520 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*   530 */   316,  188,  260,  177,  236,  331,  309,  331,  144,  331,
 /*   540 */   331,  331,  283,  257,  302,  165,  331,  256,  248,  251,
 /*   550 */   331,  213,  331,  331,  331,  229,  240,  305,  138,  331,
 /*   560 */   159,  290,  156,  135,  331,  331,  331,  331,  173,  183,
 /*   570 */   292,   95,  119,  221,  224,  227,   75,   76,  230,  234,
 /*   580 */   246,  204,  203,  199,  200,  205,  207,  316,  188,  260,
 /*   590 */   177,  331,  331,  309,  331,  144,    4,  315,   46,  283,
 /*   600 */   257,  331,  165,  331,  256,  248,  251,   28,   49,   27,
 /*   610 */    42,   35,   30,    9,  281,  331,  331,  159,  290,  156,
 /*   620 */   135,  331,  331,  331,  331,  331,  183,  331,   71,  117,
 /*   630 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*   640 */   199,  200,  205,  207,  316,  188,  260,  177,  331,  331,
 /*   650 */   309,  331,  144,  331,  331,   31,  283,  257,   40,  165,
 /*   660 */   331,  256,  248,  251,   28,   49,   27,   42,   35,   30,
 /*   670 */    41,  281,  331,  331,  159,  290,  156,  135,  331,  331,
 /*   680 */   331,  331,  331,  183,  222,   95,  119,  221,  224,  227,
 /*   690 */    75,   76,  230,  234,  246,  204,  203,  199,  200,  205,
 /*   700 */   207,  316,  188,  260,  177,  331,  331,  309,  331,  144,
 /*   710 */    62,  232,  331,  283,  257,   40,  165,  331,  256,  248,
 /*   720 */   251,  331,   49,   27,   42,   35,   30,   64,  281,  331,
 /*   730 */   331,  159,  290,  156,  135,  331,  331,  331,  331,  331,
 /*   740 */   183,  331,   89,  117,  221,  224,  227,   75,   76,  230,
 /*   750 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*   760 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*   770 */   283,  257,   40,  165,  331,  256,  248,  251,   27,   42,
 /*   780 */    35,   30,  331,  281,  331,  331,  133,  331,  159,  290,
 /*   790 */   156,  135,  331,  331,  331,  331,  331,  183,  282,  331,
 /*   800 */    99,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*   810 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*   820 */   331,  331,  309,  331,  144,  331,  331,   40,  283,  257,
 /*   830 */   286,  165,  331,  256,  248,  251,   19,  331,   66,  331,
 /*   840 */    24,   34,   12,  153,   56,  331,  159,  290,  156,  135,
 /*   850 */   331,  331,   55,   36,  331,  183,  331,  331,  331,  331,
 /*   860 */   331,   38,   43,   54,  213,   58,   59,  331,  229,  240,
 /*   870 */   331,  138,  331,  226,  211,  206,  198,  189,  191,  192,
 /*   880 */   296,   63,  331,  301,  313,  331,  331,  212,  211,  206,
 /*   890 */   198,  331,   61,  331,  296,  277,  143,    2,  331,  278,
 /*   900 */   140,  378,  331,    7,  331,  331,   16,  331,  331,   19,
 /*   910 */   155,   66,  331,   24,   34,   12,  153,   56,  378,  331,
 /*   920 */   331,  331,  331,  331,  331,   55,   36,  331,    5,  331,
 /*   930 */   331,  378,  331,  331,   38,   43,   54,   51,   58,   59,
 /*   940 */    66,  331,   24,   34,  378,  331,  226,  211,  206,  198,
 /*   950 */   189,  191,  192,  296,   63,  331,  301,  313,  331,   28,
 /*   960 */    49,   27,   42,   35,   30,   61,  281,  331,  277,  143,
 /*   970 */     2,  308,  331,  140,  331,  331,    7,  331,  331,   16,
 /*   980 */   243,  331,   19,  331,   66,  331,   24,   34,   12,  153,
 /*   990 */    56,  331,  242,  239,  247,  211,  331,  331,   55,   36,
 /*  1000 */   279,    5,  331,  331,  331,  331,  331,   38,   43,   54,
 /*  1010 */    40,   58,   59,   61,  311,  245,  187,  155,    3,  226,
 /*  1020 */   211,  206,  198,  189,  191,  192,  296,   63,  213,  301,
 /*  1030 */   313,  331,  229,  240,  331,  138,  331,  331,   61,  331,
 /*  1040 */   331,  277,  143,    2,  331,  331,  140,  331,  331,    7,
 /*  1050 */   331,  331,   16,  331,  111,  117,  221,  224,  227,   75,
 /*  1060 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*  1070 */   316,  188,  260,  177,  331,  331,  309,  331,  144,  331,
 /*  1080 */   331,  331,  283,  257,  317,  165,  331,  256,  248,  251,
 /*  1090 */   238,  174,  331,  331,  202,  175,  193,  208,  331,  331,
 /*  1100 */   159,  290,  156,  135,  331,  331,  331,  331,  331,  183,
 /*  1110 */   102,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*  1120 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*  1130 */   331,  331,  309,  331,  144,  331,  331,  197,  283,  257,
 /*  1140 */   331,  165,  331,  256,  248,  251,  331,  331,  331,  190,
 /*  1150 */   196,  331,  331,  233,  179,  195,  159,  290,  156,  135,
 /*  1160 */   331,  331,  331,  331,  331,  183,  122,  117,  221,  224,
 /*  1170 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*  1180 */   205,  207,  316,  188,  260,  177,  331,  331,  309,  331,
 /*  1190 */   144,  331,  331,  331,  283,  257,  331,  165,  331,  256,
 /*  1200 */   248,  251,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  1210 */   331,  331,  159,  290,  156,  135,  331,  331,  331,  331,
 /*  1220 */   331,  183,   90,  117,  221,  224,  227,   75,   76,  230,
 /*  1230 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*  1240 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*  1250 */   283,  257,  331,  165,  331,  256,  248,  251,  331,  331,
 /*  1260 */   331,  331,  331,  331,  331,  331,  331,  331,  159,  290,
 /*  1270 */   156,  135,  331,  331,  331,  331,  331,  183,  114,  117,
 /*  1280 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*  1290 */   199,  200,  205,  207,  316,  188,  260,  177,  331,  331,
 /*  1300 */   309,  331,  144,  331,  331,  331,  283,  257,  331,  165,
 /*  1310 */   331,  256,  248,  251,  331,  331,  331,  331,  331,  331,
 /*  1320 */   331,  331,  331,  331,  159,  290,  156,  135,  331,  331,
 /*  1330 */   331,  331,  331,  183,  104,  117,  221,  224,  227,   75,
 /*  1340 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*  1350 */   316,  188,  260,  177,  331,  331,  309,  331,  144,  331,
 /*  1360 */   331,  331,  283,  257,  331,  165,  331,  256,  248,  251,
 /*  1370 */   331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  1380 */   159,  290,  156,  135,  331,  331,  331,  331,  331,  183,
 /*  1390 */    92,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*  1400 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*  1410 */   331,  331,  309,  331,  144,  331,  331,  331,  283,  257,
 /*  1420 */   331,  165,  331,  256,  248,  251,  331,  331,  331,  331,
 /*  1430 */   331,  331,  331,  331,  331,  331,  159,  290,  156,  135,
 /*  1440 */   331,  331,  331,  331,  331,  183,   82,  117,  221,  224,
 /*  1450 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*  1460 */   205,  207,  316,  188,  260,  177,  331,  331,  309,  331,
 /*  1470 */   144,  331,  331,  331,  283,  257,  331,  165,  331,  256,
 /*  1480 */   248,  251,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  1490 */   331,  331,  159,  290,  156,  135,  331,  331,  331,  331,
 /*  1500 */   331,  183,  108,  117,  221,  224,  227,   75,   76,  230,
 /*  1510 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*  1520 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*  1530 */   283,  257,  331,  165,  331,  256,  248,  251,  331,  331,
 /*  1540 */   331,  331,  331,  331,  331,  331,  331,  331,  159,  290,
 /*  1550 */   156,  135,  331,  331,  331,  331,  331,  183,  115,  117,
 /*  1560 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*  1570 */   199,  200,  205,  207,  316,  188,  260,  177,  331,  331,
 /*  1580 */   309,  331,  144,  331,  331,  331,  283,  257,  331,  165,
 /*  1590 */   331,  256,  248,  251,  331,  331,  331,  331,  331,  331,
 /*  1600 */   331,  331,  331,  331,  159,  290,  156,  135,  331,  331,
 /*  1610 */   331,  331,  331,  183,  116,  117,  221,  224,  227,   75,
 /*  1620 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*  1630 */   316,  188,  260,  177,  331,  331,  309,  331,  144,  331,
 /*  1640 */   331,  331,  283,  257,  331,  165,  331,  256,  248,  251,
 /*  1650 */   331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  1660 */   159,  290,  156,  135,  331,  331,  331,  331,  331,  183,
 /*  1670 */   105,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*  1680 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*  1690 */   331,  331,  309,  331,  144,  331,  331,  331,  283,  257,
 /*  1700 */   331,  165,  331,  256,  248,  251,  331,  331,  331,  331,
 /*  1710 */   331,  331,  331,  331,  331,  331,  159,  290,  156,  135,
 /*  1720 */   331,  331,  331,  331,  331,  183,  106,  117,  221,  224,
 /*  1730 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*  1740 */   205,  207,  316,  188,  260,  177,  331,  331,  309,  331,
 /*  1750 */   144,  331,  331,  331,  283,  257,  331,  165,  331,  256,
 /*  1760 */   248,  251,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  1770 */   331,  331,  159,  290,  156,  135,  331,  331,  331,  331,
 /*  1780 */   331,  183,   85,  117,  221,  224,  227,   75,   76,  230,
 /*  1790 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*  1800 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*  1810 */   283,  257,  331,  165,  331,  256,  248,  251,  331,  331,
 /*  1820 */   331,  331,  331,  331,  331,  331,  331,  331,  159,  290,
 /*  1830 */   156,  135,  331,  331,  331,  331,  331,  183,  107,  117,
 /*  1840 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*  1850 */   199,  200,  205,  207,  316,  188,  260,  177,  331,  331,
 /*  1860 */   309,  331,  144,  331,  331,  331,  283,  257,  331,  165,
 /*  1870 */   331,  256,  248,  251,  331,  331,  331,  331,  331,  331,
 /*  1880 */   331,  331,  331,  331,  159,  290,  156,  135,  331,  331,
 /*  1890 */   331,  331,  331,  183,  118,  117,  221,  224,  227,   75,
 /*  1900 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*  1910 */   316,  188,  260,  177,  331,  331,  309,  331,  144,  331,
 /*  1920 */   331,  331,  283,  257,  331,  165,  331,  256,  248,  251,
 /*  1930 */   331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  1940 */   159,  290,  156,  135,  331,  331,  331,  331,  331,  183,
 /*  1950 */    84,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*  1960 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*  1970 */   331,  331,  309,  331,  144,  331,  331,  331,  283,  257,
 /*  1980 */   331,  165,  331,  256,  248,  251,  331,  331,  331,  331,
 /*  1990 */   331,  331,  331,  331,  331,  331,  159,  290,  156,  135,
 /*  2000 */   331,  331,  331,  331,  331,  183,  101,  117,  221,  224,
 /*  2010 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*  2020 */   205,  207,  316,  188,  260,  177,  331,  331,  309,  331,
 /*  2030 */   144,  331,  331,  331,  283,  257,  331,  165,  331,  256,
 /*  2040 */   248,  251,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  2050 */   331,  331,  159,  290,  156,  135,  331,  331,  331,  331,
 /*  2060 */   331,  183,  120,  117,  221,  224,  227,   75,   76,  230,
 /*  2070 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*  2080 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*  2090 */   283,  257,  331,  165,  331,  256,  248,  251,  331,  331,
 /*  2100 */   331,  331,  331,  331,  331,  331,  331,  331,  159,  290,
 /*  2110 */   156,  135,  331,  331,  331,  331,  331,  183,  103,  117,
 /*  2120 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*  2130 */   199,  200,  205,  207,  316,  188,  260,  177,  331,  331,
 /*  2140 */   309,  331,  144,  331,  331,  331,  283,  257,  331,  165,
 /*  2150 */   331,  256,  248,  251,  331,  331,  331,  331,  331,  331,
 /*  2160 */   331,  331,  331,  331,  159,  290,  156,  135,  331,  331,
 /*  2170 */   331,  331,  331,  183,   97,  117,  221,  224,  227,   75,
 /*  2180 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*  2190 */   316,  188,  260,  177,  331,  331,  309,  331,  144,  331,
 /*  2200 */   331,  331,  283,  257,  331,  165,  331,  256,  248,  251,
 /*  2210 */   331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  2220 */   159,  290,  156,  135,  331,  331,  331,  331,  331,  183,
 /*  2230 */   123,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*  2240 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*  2250 */   331,  331,  309,  331,  144,  331,  331,  331,  283,  257,
 /*  2260 */   331,  165,  331,  256,  248,  251,  331,  331,  331,  331,
 /*  2270 */   331,  331,  331,  331,  331,  331,  159,  290,  156,  135,
 /*  2280 */   331,  331,  331,  331,  331,  183,   74,  117,  221,  224,
 /*  2290 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*  2300 */   205,  207,  316,  188,  260,  177,  331,  331,  309,  331,
 /*  2310 */   144,  331,  331,  331,  283,  257,  331,  165,  331,  256,
 /*  2320 */   248,  251,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  2330 */   331,  331,  159,  290,  156,  135,  331,  331,  331,  331,
 /*  2340 */   331,  183,   94,  117,  221,  224,  227,   75,   76,  230,
 /*  2350 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*  2360 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*  2370 */   283,  257,  331,  165,  331,  256,  248,  251,  331,  331,
 /*  2380 */   331,  331,  331,  331,  331,  331,  331,  331,  159,  290,
 /*  2390 */   156,  135,  331,  331,  331,  331,  331,  183,  121,  117,
 /*  2400 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*  2410 */   199,  200,  205,  207,  316,  188,  260,  177,  331,  331,
 /*  2420 */   309,  331,  144,  331,  331,  331,  283,  257,  331,  165,
 /*  2430 */   331,  256,  248,  251,  331,  331,  331,  331,  331,  331,
 /*  2440 */   331,  331,  331,  331,  159,  290,  156,  135,  331,  331,
 /*  2450 */   331,  331,  331,  183,  100,  117,  221,  224,  227,   75,
 /*  2460 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*  2470 */   316,  188,  260,  177,  331,  331,  309,  331,  144,  331,
 /*  2480 */   331,  331,  283,  257,  331,  165,  331,  256,  248,  251,
 /*  2490 */   331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  2500 */   159,  290,  156,  135,  331,  331,  331,  331,  331,  183,
 /*  2510 */   109,  117,  221,  224,  227,   75,   76,  230,  234,  246,
 /*  2520 */   204,  203,  199,  200,  205,  207,  316,  188,  260,  177,
 /*  2530 */   331,  331,  309,  331,  144,  331,  331,  331,  283,  257,
 /*  2540 */   331,  165,  331,  256,  248,  251,  331,  331,  331,  331,
 /*  2550 */   331,  331,  331,  331,  331,  331,  159,  290,  156,  135,
 /*  2560 */   331,  331,  331,  331,  331,  183,  113,  117,  221,  224,
 /*  2570 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*  2580 */   205,  207,  316,  188,  260,  177,  331,  331,  309,  331,
 /*  2590 */   144,  331,  331,  331,  283,  257,  331,  165,  331,  256,
 /*  2600 */   248,  251,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  2610 */   331,  331,  159,  290,  156,  135,  331,  331,  331,  331,
 /*  2620 */   331,  183,   91,  117,  221,  224,  227,   75,   76,  230,
 /*  2630 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*  2640 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*  2650 */   283,  257,  331,  165,  331,  256,  248,  251,  331,   19,
 /*  2660 */   331,   66,  331,   24,   34,   12,  153,   56,  159,  290,
 /*  2670 */   156,  135,  331,  331,  331,   55,   36,  183,    6,  331,
 /*  2680 */   331,  331,  331,  331,   38,   43,   54,   51,   58,   59,
 /*  2690 */    66,  331,   24,   34,  331,  331,  226,  211,  206,  198,
 /*  2700 */   189,  191,  192,  296,   63,  331,  301,  313,  298,   28,
 /*  2710 */    49,   27,   42,   35,   30,   61,  281,  331,  277,  143,
 /*  2720 */     2,  331,  331,  140,  331,  331,    7,  331,  331,   16,
 /*  2730 */   331,  331,   19,  331,   66,  331,   24,   34,   12,  153,
 /*  2740 */    56,  331,  331,  331,  331,  331,  331,  331,   55,   36,
 /*  2750 */   331,  331,  331,  331,  331,  331,  331,   38,   43,   54,
 /*  2760 */    40,   58,   59,  331,  331,  331,  331,  331,  331,  226,
 /*  2770 */   211,  206,  198,  189,  191,  192,  296,   63,  331,  301,
 /*  2780 */   313,  331,  331,  331,  331,  220,  331,  331,   61,  331,
 /*  2790 */   331,  277,  143,    2,  331,  331,  140,  331,  331,    7,
 /*  2800 */   331,  331,   16,  331,   87,  117,  221,  224,  227,   75,
 /*  2810 */    76,  230,  234,  246,  204,  203,  199,  200,  205,  207,
 /*  2820 */   316,  188,  260,  177,  331,  331,  309,  331,  144,  331,
 /*  2830 */   331,  331,  283,  257,  331,  165,  331,  256,  248,  251,
 /*  2840 */   331,   19,  331,   66,  331,   24,   34,   12,  153,   56,
 /*  2850 */   159,  290,  156,  135,  331,  331,  331,   55,   36,  183,
 /*  2860 */    50,  331,  331,  331,  331,  331,   38,   43,   54,   51,
 /*  2870 */    58,   59,   66,  331,   24,   34,  331,  331,  226,  211,
 /*  2880 */   206,  198,  189,  191,  192,  296,   63,  331,  301,  313,
 /*  2890 */   331,   28,   49,   27,   42,   35,   30,   61,  281,  331,
 /*  2900 */   277,  143,    2,  331,  331,  140,  331,  331,    7,  331,
 /*  2910 */   331,   16,  331,  331,   19,  331,   66,  331,   24,   34,
 /*  2920 */    12,  153,   56,  215,  331,  331,  331,  331,  331,  331,
 /*  2930 */    55,   36,  331,  125,  331,  331,  331,  331,  331,   38,
 /*  2940 */    43,   54,   40,   58,   59,  331,  331,  331,  331,  331,
 /*  2950 */   331,  226,  211,  206,  198,  189,  191,  192,  296,   63,
 /*  2960 */   331,  301,  313,  331,  331,  331,  331,  331,  331,  331,
 /*  2970 */    61,  331,  331,  277,  143,    2,  331,  331,  140,  331,
 /*  2980 */   331,    7,  331,  331,   16,  331,  124,  117,  221,  224,
 /*  2990 */   227,   75,   76,  230,  234,  246,  204,  203,  199,  200,
 /*  3000 */   205,  207,  316,  188,  260,  177,  331,  331,  309,  331,
 /*  3010 */   144,  331,  331,  331,  283,  257,  331,  165,  331,  256,
 /*  3020 */   248,  251,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  3030 */   331,  331,  159,  290,  156,  135,  331,  331,  331,  331,
 /*  3040 */   331,  183,  112,  117,  221,  224,  227,   75,   76,  230,
 /*  3050 */   234,  246,  204,  203,  199,  200,  205,  207,  316,  188,
 /*  3060 */   260,  177,  331,  331,  309,  331,  144,  331,  331,  331,
 /*  3070 */   283,  257,  331,  165,  331,  256,  248,  251,  331,   19,
 /*  3080 */   331,   66,  331,   24,   34,   12,  153,   56,  159,  290,
 /*  3090 */   156,  135,  331,  331,  331,   55,   36,  183,    5,  331,
 /*  3100 */   331,  331,  331,  331,   38,   43,   54,   51,   58,   59,
 /*  3110 */    66,  331,   24,   34,  331,  331,  226,  211,  206,  198,
 /*  3120 */   189,  191,  192,  296,   63,  331,  301,  313,  217,   28,
 /*  3130 */    49,   27,   42,   35,   30,   61,  281,  331,  277,  143,
 /*  3140 */     2,  331,  331,  140,  331,  331,    7,  331,  331,   16,
 /*  3150 */   331,  331,   19,  331,   66,  331,   24,   34,   12,  153,
 /*  3160 */    56,  331,  331,  331,  331,  331,  331,  331,   55,   36,
 /*  3170 */   331,  331,  299,  331,  331,  331,  331,   38,   43,   54,
 /*  3180 */    40,   58,   59,   66,  331,   24,   34,  331,  331,  226,
 /*  3190 */   211,  206,  198,  189,  191,  192,  296,   63,  331,  301,
 /*  3200 */   313,  331,   28,   49,   27,   42,   35,   30,   61,  281,
 /*  3210 */   331,  277,  143,    2,  331,  331,  140,  331,  331,    7,
 /*  3220 */   331,  331,   16,  331,  331,   19,  331,   66,  331,   24,
 /*  3230 */    34,   12,  153,   56,  331,  331,  331,  331,  331,  331,
 /*  3240 */   331,   55,   36,  331,    8,  331,  331,  331,  331,  331,
 /*  3250 */    38,   43,   54,   40,   58,   59,  331,  331,  331,  331,
 /*  3260 */   331,  331,  226,  211,  206,  198,  189,  191,  192,  296,
 /*  3270 */    63,  331,  301,  313,  331,  331,  331,  331,  331,  331,
 /*  3280 */   331,   61,  331,  331,  277,  143,    2,  331,  331,  140,
 /*  3290 */   331,  331,    7,  331,  331,   16,  331,   93,  117,  221,
 /*  3300 */   224,  227,   75,   76,  230,  234,  246,  204,  203,  199,
 /*  3310 */   200,  205,  207,  316,  188,  260,  177,  331,  331,  309,
 /*  3320 */   331,  144,  331,  331,  331,  283,  257,  331,  165,  331,
 /*  3330 */   256,  248,  251,  331,  331,  331,  331,  331,  331,  331,
 /*  3340 */   331,  331,  331,  159,  290,  156,  135,  331,  331,  331,
 /*  3350 */   331,  331,  183,   81,  117,  221,  224,  227,   75,   76,
 /*  3360 */   230,  234,  246,  204,  203,  199,  200,  205,  207,  316,
 /*  3370 */   188,  260,  177,  331,  331,  309,  331,  144,  331,  331,
 /*  3380 */   197,  283,  257,  331,  165,  331,  256,  248,  251,  331,
 /*  3390 */   331,  331,  190,  196,  331,  331,  235,  179,  195,  159,
 /*  3400 */   290,  156,  135,  331,  331,  331,  331,  331,  183,   88,
 /*  3410 */   117,  221,  224,  227,   75,   76,  230,  234,  246,  204,
 /*  3420 */   203,  199,  200,  205,  207,  316,  188,  260,  177,  331,
 /*  3430 */   331,  309,  331,  144,  331,  331,  331,  283,  257,  331,
 /*  3440 */   165,  331,  256,  248,  251,  331,  331,  331,  331,  331,
 /*  3450 */   331,  331,  331,  331,  331,  159,  290,  156,  135,  331,
 /*  3460 */   331,  331,  331,  331,  183,   80,  117,  221,  224,  227,
 /*  3470 */    75,   76,  230,  234,  246,  204,  203,  199,  200,  205,
 /*  3480 */   207,  316,  188,  260,  177,  331,  331,  309,  331,  144,
 /*  3490 */   331,  331,  331,  283,  257,  331,  165,  331,  256,  248,
 /*  3500 */   251,  331,  331,  331,  331,  331,  331,  331,  331,  331,
 /*  3510 */   331,  159,  290,  156,  135,  331,  331,  331,  331,  331,
 /*  3520 */   183,   98,  117,  221,  224,  227,   75,   76,  230,  234,
 /*  3530 */   246,  204,  203,  199,  200,  205,  207,  316,  188,  260,
 /*  3540 */   177,  331,  331,  309,  331,  144,  331,  331,  331,  283,
 /*  3550 */   257,  331,  165,  331,  256,  248,  251,  331,  331,  331,
 /*  3560 */   331,  331,  331,  331,  331,  331,  331,  159,  290,  156,
 /*  3570 */   135,  331,  331,  331,  331,  331,  183,   86,  117,  221,
 /*  3580 */   224,  227,   75,   76,  230,  234,  246,  204,  203,  199,
 /*  3590 */   200,  205,  207,  316,  188,  260,  177,  331,  331,  309,
 /*  3600 */   331,  144,  331,  331,  331,  283,  257,  331,  165,  331,
 /*  3610 */   256,  248,  251,  331,  331,  331,  331,  331,  331,  331,
 /*  3620 */   331,  331,  331,  159,  290,  156,  135,  331,  331,  331,
 /*  3630 */   331,  331,  183,   73,  117,  221,  224,  227,   75,   76,
 /*  3640 */   230,  234,  246,  204,  203,  199,  200,  205,  207,  316,
 /*  3650 */   188,  260,  177,  331,  331,  309,  331,  144,  331,  331,
 /*  3660 */   331,  283,  257,  331,  165,  331,  256,  248,  251,  331,
 /*  3670 */   331,  331,  331,  331,  331,  331,  331,  331,  331,  159,
 /*  3680 */   290,  156,  135,  331,  331,  331,  331,  331,  183,   96,
 /*  3690 */   117,  221,  224,  227,   75,   76,  230,  234,  246,  204,
 /*  3700 */   203,  199,  200,  205,  207,  316,  188,  260,  177,  331,
 /*  3710 */   331,  309,  331,  144,  331,  331,  331,  283,  257,  331,
 /*  3720 */   165,  331,  256,  248,  251,  331,   19,  331,   66,  331,
 /*  3730 */    24,   34,   12,  153,   56,  159,  290,  156,  135,  331,
 /*  3740 */   331,  331,   55,   36,  183,   22,  331,  331,  331,  331,
 /*  3750 */   331,   38,   43,   54,  331,   58,   59,  331,  141,  137,
 /*  3760 */   142,  331,  331,  226,  211,  206,  198,  189,  191,  192,
 /*  3770 */   296,   63,  331,  301,  313,  331,  331,   11,  331,  128,
 /*  3780 */   129,  331,   61,  250,  331,  277,  143,    2,  331,  331,
 /*  3790 */   140,  331,  331,    7,  331,  331,   16,  331,  110,  117,
 /*  3800 */   221,  224,  227,   75,   76,  230,  234,  246,  204,  203,
 /*  3810 */   199,  200,  205,  207,  316,  188,  260,  177,  331,  331,
 /*  3820 */   309,  331,  144,  331,  331,  331,  283,  257,  331,  165,
 /*  3830 */   331,  256,  248,  251,   19,  331,   66,  331,   24,   34,
 /*  3840 */    12,  153,   56,  331,  159,  290,  156,  135,  331,  331,
 /*  3850 */    55,   36,  331,  183,  331,  331,  331,  331,  331,   38,
 /*  3860 */    43,   54,  331,   58,   59,  331,  331,  331,  331,  331,
 /*  3870 */   331,  226,  211,  206,  198,  189,  191,  192,  296,   63,
 /*  3880 */    19,  301,  313,  331,  331,  331,   12,  153,   56,  331,
 /*  3890 */    61,  331,  331,  277,  143,    2,   55,   36,  140,  331,
 /*  3900 */   331,    7,  331,  331,   16,   38,   43,   54,   51,   58,
 /*  3910 */    59,   66,  331,   24,   34,  331,  331,  226,  211,  206,
 /*  3920 */   198,  189,  191,  192,  296,   63,  331,  301,  313,  331,
 /*  3930 */    28,   49,   27,   42,   35,   30,   61,  281,  331,  277,
 /*  3940 */   143,    2,  331,  153,  140,  331,  331,    7,  331,  331,
 /*  3950 */    16,  331,  331,  331,   60,    6,  331,  331,  331,  331,
 /*  3960 */   212,  331,  215,  331,   51,  331,  331,   66,  331,   24,
 /*  3970 */    34,  331,  278,  331,  211,  206,  198,  189,  191,  192,
 /*  3980 */   331,   40,  331,  331,  331,  331,   28,   49,   27,   42,
 /*  3990 */    35,   30,   61,  281,  331,  277,  143,    2,  331,  287,
 /*  4000 */   331,  331,  331,    7,  331,  331,   78,   77,  331,  331,
 /*  4010 */   331,  331,  331,  331,  331,  331,  164,  316,  188,  260,
 /*  4020 */   255,   51,  331,  309,   66,  331,   24,   34,  278,  283,
 /*  4030 */   257,  331,  127,  331,  256,  248,  251,   40,  331,  331,
 /*  4040 */   331,  126,  331,   28,   49,   27,   42,   35,   30,   51,
 /*  4050 */   281,  331,   66,  331,   24,   34,  331,   51,  331,  331,
 /*  4060 */    66,  331,   24,   34,  383,  331,  383,  383,  383,    6,
 /*  4070 */   331,   28,   49,   27,   42,   35,   30,  331,  281,   28,
 /*  4080 */    49,   27,   42,   35,   30,  383,  281,  383,  383,  331,
 /*  4090 */   331,  383,  331,  331,   40,  331,  331,  331,  331,  331,
 /*  4100 */   418,  331,  141,  137,  142,  331,  331,  331,  331,  331,
 /*  4110 */   331,  225,  331,   51,  331,  331,   66,  331,   24,   34,
 /*  4120 */   331,   11,   40,  128,  129,  331,  331,  250,  331,  331,
 /*  4130 */    40,  331,   78,   77,  331,   28,   49,   27,   42,   35,
 /*  4140 */    30,  331,  281,  316,  188,  260,  255,  331,  331,  309,
 /*  4150 */   331,  331,  331,  331,  331,  283,  257,  331,  163,  331,
 /*  4160 */   256,  248,  251,  331,   78,   77,  331,  219,  331,  331,
 /*  4170 */   331,  331,  331,  331,  331,  316,  188,  260,  255,   51,
 /*  4180 */   331,  309,   66,  331,   24,   34,   40,  283,  257,  331,
 /*  4190 */   162,  331,  256,  248,  251,  331,  331,  331,  331,   69,
 /*  4200 */    77,   28,   49,   27,   42,   35,   30,  331,  281,  331,
 /*  4210 */   316,  188,  260,  255,  331,  331,  309,  331,  331,   68,
 /*  4220 */    77,  331,  283,  257,  331,  288,  331,  256,  248,  251,
 /*  4230 */   316,  188,  260,  255,   51,  331,  309,   66,  331,   24,
 /*  4240 */    34,  153,  283,  257,  331,  288,  331,  256,  248,  251,
 /*  4250 */   331,  331,   40,  331,  331,  209,   28,   49,   27,   42,
 /*  4260 */    35,   30,   51,  281,  331,   66,  331,   24,   34,  331,
 /*  4270 */   331,  331,  211,  206,  198,  189,  191,  192,  331,  331,
 /*  4280 */   331,  331,  331,  331,   28,   49,   27,   42,   35,   30,
 /*  4290 */    61,  281,  331,  277,  143,    2,   66,  331,   24,   34,
 /*  4300 */   331,    7,  331,  331,  331,  331,   37,   40,  331,  331,
 /*  4310 */   331,  331,  331,  331,  253,   28,   49,   27,   42,   35,
 /*  4320 */    30,   66,  281,   24,   34,  331,  331,  331,  331,  331,
 /*  4330 */   331,   44,  331,  331,  331,   40,   57,    6,  331,  331,
 /*  4340 */    28,   49,   27,   42,   35,   30,    6,  281,  331,  383,
 /*  4350 */   331,  383,  383,  383,  331,  331,  331,  331,  418,  331,
 /*  4360 */   141,  137,  142,  331,  331,  331,   40,  331,  331,  331,
 /*  4370 */   383,  197,  383,  383,  331,  331,  383,  331,  331,   11,
 /*  4380 */   197,  128,  129,  190,  196,  250,  331,  231,  179,  195,
 /*  4390 */   243,   40,  190,  196,  331,  331,  231,  179,  195,  331,
 /*  4400 */   331,  331,  242,  239,  331,  149,  331,  331,  237,  331,
 /*  4410 */   331,  331,  331,  331,  146,  331,  331,  331,  331,  331,
 /*  4420 */   331,  331,  331,  331,  331,  210,  187,
    );
    static public $yy_lookahead = array(
 /*     0 */    76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*    10 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*    20 */    96,   97,   98,   99,    1,   78,  102,    4,  104,    6,
 /*    30 */     7,   13,  108,  109,   15,  111,   30,  113,  114,  115,
 /*    40 */    21,   23,   24,   25,   26,   27,   28,   96,   30,   38,
 /*    50 */   126,  127,  128,  129,  126,   48,  128,  129,   51,  135,
 /*    60 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*    70 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*    80 */    74,   70,  102,   54,  104,   56,   57,   21,  108,  109,
 /*    90 */   110,  111,   74,  113,  114,  115,   27,   28,  122,   30,
 /*   100 */    96,  121,  126,  123,  128,  129,  126,  127,  128,  129,
 /*   110 */    78,   21,  108,  109,   40,  135,   80,   81,   82,   83,
 /*   120 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   130 */    94,   95,   96,   97,   98,   99,  132,    2,  102,   96,
 /*   140 */   104,   51,   96,   74,  108,  109,  110,  111,  102,  113,
 /*   150 */   114,  115,  106,  107,  108,  109,   21,  121,  126,  123,
 /*   160 */   128,  129,  126,  127,  128,  129,  126,   15,  128,  129,
 /*   170 */   120,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   180 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*   190 */    98,   99,   78,   40,  102,   17,  104,   78,   20,   38,
 /*   200 */   108,  109,  110,  111,   52,  113,  114,  115,   21,   31,
 /*   210 */    32,   58,   22,  121,   33,  123,   63,   78,  126,  127,
 /*   220 */   128,  129,   11,   12,   71,   38,   67,  135,   80,   81,
 /*   230 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   240 */    92,   93,   94,   95,   96,   97,   98,   99,   22,   51,
 /*   250 */   102,   64,  104,   67,   68,   38,  108,  109,  110,  111,
 /*   260 */     3,  113,  114,  115,   38,  126,  122,  128,  129,  121,
 /*   270 */   126,  123,  128,  129,  126,  127,  128,  129,  133,  134,
 /*   280 */   133,  134,   38,  135,   80,   81,   82,   83,   84,   85,
 /*   290 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*   300 */    96,   97,   98,   99,   49,   50,  102,   22,  104,   21,
 /*   310 */    22,   40,  108,  109,  110,  111,   78,  113,  114,  115,
 /*   320 */    26,   27,   28,   38,   30,  121,   38,  123,   22,   58,
 /*   330 */   126,  127,  128,  129,   63,   16,   70,   78,   78,  135,
 /*   340 */    77,  120,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   350 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*   360 */    97,   98,   99,   73,   96,  102,    3,  104,   74,   13,
 /*   370 */    14,  108,  109,   78,  111,   96,  113,  114,  115,   23,
 /*   380 */    24,   25,   26,   27,   28,   22,   30,  134,   78,  126,
 /*   390 */   127,  128,  129,   78,   78,  104,  116,   77,  135,   79,
 /*   400 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*   410 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*   420 */   116,  125,  102,   78,  104,  120,   51,  130,  108,  109,
 /*   430 */    74,  111,    3,  113,  114,  115,   73,   21,   23,   24,
 /*   440 */    25,   26,   27,   28,  105,   30,  126,  127,  128,  129,
 /*   450 */    34,   22,  105,   51,   38,  135,  105,   80,   81,   82,
 /*   460 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   470 */    93,   94,   95,   96,   97,   98,   99,  105,  105,  102,
 /*   480 */    96,  104,   78,  105,   78,  108,  109,  110,  111,   74,
 /*   490 */   113,  114,  115,  136,  112,  136,   21,  136,  116,  117,
 /*   500 */   123,  119,   73,  126,  127,  128,  129,  136,  136,  136,
 /*   510 */   136,  136,  135,   38,   80,   81,   82,   83,   84,   85,
 /*   520 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*   530 */    96,   97,   98,   99,   59,  136,  102,  136,  104,  136,
 /*   540 */   136,  136,  108,  109,  110,  111,  136,  113,  114,  115,
 /*   550 */   136,  112,  136,  136,  136,  116,  117,  123,  119,  136,
 /*   560 */   126,  127,  128,  129,  136,  136,  136,  136,   77,  135,
 /*   570 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*   580 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*   590 */    99,  136,  136,  102,  136,  104,   21,   22,   14,  108,
 /*   600 */   109,  136,  111,  136,  113,  114,  115,   23,   24,   25,
 /*   610 */    26,   27,   28,   38,   30,  136,  136,  126,  127,  128,
 /*   620 */   129,  136,  136,  136,  136,  136,  135,  136,   80,   81,
 /*   630 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*   640 */    92,   93,   94,   95,   96,   97,   98,   99,  136,  136,
 /*   650 */   102,  136,  104,  136,  136,   14,  108,  109,   74,  111,
 /*   660 */   136,  113,  114,  115,   23,   24,   25,   26,   27,   28,
 /*   670 */   122,   30,  136,  136,  126,  127,  128,  129,  136,  136,
 /*   680 */   136,  136,  136,  135,   79,   80,   81,   82,   83,   84,
 /*   690 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*   700 */    95,   96,   97,   98,   99,  136,  136,  102,  136,  104,
 /*   710 */    21,   22,  136,  108,  109,   74,  111,  136,  113,  114,
 /*   720 */   115,  136,   24,   25,   26,   27,   28,   38,   30,  136,
 /*   730 */   136,  126,  127,  128,  129,  136,  136,  136,  136,  136,
 /*   740 */   135,  136,   80,   81,   82,   83,   84,   85,   86,   87,
 /*   750 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*   760 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*   770 */   108,  109,   74,  111,  136,  113,  114,  115,   25,   26,
 /*   780 */    27,   28,  136,   30,  136,  136,  124,  136,  126,  127,
 /*   790 */   128,  129,  136,  136,  136,  136,  136,  135,   78,  136,
 /*   800 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*   810 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*   820 */   136,  136,  102,  136,  104,  136,  136,   74,  108,  109,
 /*   830 */    78,  111,  136,  113,  114,  115,    2,  136,    4,  136,
 /*   840 */     6,    7,    8,    9,   10,  136,  126,  127,  128,  129,
 /*   850 */   136,  136,   18,   19,  136,  135,  136,  136,  136,  136,
 /*   860 */   136,   27,   28,   29,  112,   31,   32,  136,  116,  117,
 /*   870 */   136,  119,  136,   39,   40,   41,   42,   43,   44,   45,
 /*   880 */    46,   47,  136,   49,   50,  136,  136,   53,   40,   41,
 /*   890 */    42,  136,   58,  136,   46,   61,   62,   63,  136,   65,
 /*   900 */    66,   21,  136,   69,  136,  136,   72,  136,  136,    2,
 /*   910 */    62,    4,  136,    6,    7,    8,    9,   10,   38,  136,
 /*   920 */   136,  136,  136,  136,  136,   18,   19,  136,   21,  136,
 /*   930 */   136,   51,  136,  136,   27,   28,   29,    1,   31,   32,
 /*   940 */     4,  136,    6,    7,   64,  136,   39,   40,   41,   42,
 /*   950 */    43,   44,   45,   46,   47,  136,   49,   50,  136,   23,
 /*   960 */    24,   25,   26,   27,   28,   58,   30,  136,   61,   62,
 /*   970 */    63,   64,  136,   66,  136,  136,   69,  136,  136,   72,
 /*   980 */    96,  136,    2,  136,    4,  136,    6,    7,    8,    9,
 /*   990 */    10,  136,  108,  109,   78,   40,  136,  136,   18,   19,
 /*  1000 */    64,   21,  136,  136,  136,  136,  136,   27,   28,   29,
 /*  1010 */    74,   31,   32,   58,   34,  131,  132,   62,   63,   39,
 /*  1020 */    40,   41,   42,   43,   44,   45,   46,   47,  112,   49,
 /*  1030 */    50,  136,  116,  117,  136,  119,  136,  136,   58,  136,
 /*  1040 */   136,   61,   62,   63,  136,  136,   66,  136,  136,   69,
 /*  1050 */   136,  136,   72,  136,   80,   81,   82,   83,   84,   85,
 /*  1060 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  1070 */    96,   97,   98,   99,  136,  136,  102,  136,  104,  136,
 /*  1080 */   136,  136,  108,  109,   96,  111,  136,  113,  114,  115,
 /*  1090 */   102,  103,  136,  136,  106,  107,  108,  109,  136,  136,
 /*  1100 */   126,  127,  128,  129,  136,  136,  136,  136,  136,  135,
 /*  1110 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*  1120 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*  1130 */   136,  136,  102,  136,  104,  136,  136,   84,  108,  109,
 /*  1140 */   136,  111,  136,  113,  114,  115,  136,  136,  136,   96,
 /*  1150 */    97,  136,  136,  100,  101,  102,  126,  127,  128,  129,
 /*  1160 */   136,  136,  136,  136,  136,  135,   80,   81,   82,   83,
 /*  1170 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1180 */    94,   95,   96,   97,   98,   99,  136,  136,  102,  136,
 /*  1190 */   104,  136,  136,  136,  108,  109,  136,  111,  136,  113,
 /*  1200 */   114,  115,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  1210 */   136,  136,  126,  127,  128,  129,  136,  136,  136,  136,
 /*  1220 */   136,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1230 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  1240 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*  1250 */   108,  109,  136,  111,  136,  113,  114,  115,  136,  136,
 /*  1260 */   136,  136,  136,  136,  136,  136,  136,  136,  126,  127,
 /*  1270 */   128,  129,  136,  136,  136,  136,  136,  135,   80,   81,
 /*  1280 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*  1290 */    92,   93,   94,   95,   96,   97,   98,   99,  136,  136,
 /*  1300 */   102,  136,  104,  136,  136,  136,  108,  109,  136,  111,
 /*  1310 */   136,  113,  114,  115,  136,  136,  136,  136,  136,  136,
 /*  1320 */   136,  136,  136,  136,  126,  127,  128,  129,  136,  136,
 /*  1330 */   136,  136,  136,  135,   80,   81,   82,   83,   84,   85,
 /*  1340 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  1350 */    96,   97,   98,   99,  136,  136,  102,  136,  104,  136,
 /*  1360 */   136,  136,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  1370 */   136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  1380 */   126,  127,  128,  129,  136,  136,  136,  136,  136,  135,
 /*  1390 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*  1400 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*  1410 */   136,  136,  102,  136,  104,  136,  136,  136,  108,  109,
 /*  1420 */   136,  111,  136,  113,  114,  115,  136,  136,  136,  136,
 /*  1430 */   136,  136,  136,  136,  136,  136,  126,  127,  128,  129,
 /*  1440 */   136,  136,  136,  136,  136,  135,   80,   81,   82,   83,
 /*  1450 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1460 */    94,   95,   96,   97,   98,   99,  136,  136,  102,  136,
 /*  1470 */   104,  136,  136,  136,  108,  109,  136,  111,  136,  113,
 /*  1480 */   114,  115,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  1490 */   136,  136,  126,  127,  128,  129,  136,  136,  136,  136,
 /*  1500 */   136,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1510 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  1520 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*  1530 */   108,  109,  136,  111,  136,  113,  114,  115,  136,  136,
 /*  1540 */   136,  136,  136,  136,  136,  136,  136,  136,  126,  127,
 /*  1550 */   128,  129,  136,  136,  136,  136,  136,  135,   80,   81,
 /*  1560 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*  1570 */    92,   93,   94,   95,   96,   97,   98,   99,  136,  136,
 /*  1580 */   102,  136,  104,  136,  136,  136,  108,  109,  136,  111,
 /*  1590 */   136,  113,  114,  115,  136,  136,  136,  136,  136,  136,
 /*  1600 */   136,  136,  136,  136,  126,  127,  128,  129,  136,  136,
 /*  1610 */   136,  136,  136,  135,   80,   81,   82,   83,   84,   85,
 /*  1620 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  1630 */    96,   97,   98,   99,  136,  136,  102,  136,  104,  136,
 /*  1640 */   136,  136,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  1650 */   136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  1660 */   126,  127,  128,  129,  136,  136,  136,  136,  136,  135,
 /*  1670 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*  1680 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*  1690 */   136,  136,  102,  136,  104,  136,  136,  136,  108,  109,
 /*  1700 */   136,  111,  136,  113,  114,  115,  136,  136,  136,  136,
 /*  1710 */   136,  136,  136,  136,  136,  136,  126,  127,  128,  129,
 /*  1720 */   136,  136,  136,  136,  136,  135,   80,   81,   82,   83,
 /*  1730 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1740 */    94,   95,   96,   97,   98,   99,  136,  136,  102,  136,
 /*  1750 */   104,  136,  136,  136,  108,  109,  136,  111,  136,  113,
 /*  1760 */   114,  115,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  1770 */   136,  136,  126,  127,  128,  129,  136,  136,  136,  136,
 /*  1780 */   136,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  1790 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  1800 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*  1810 */   108,  109,  136,  111,  136,  113,  114,  115,  136,  136,
 /*  1820 */   136,  136,  136,  136,  136,  136,  136,  136,  126,  127,
 /*  1830 */   128,  129,  136,  136,  136,  136,  136,  135,   80,   81,
 /*  1840 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*  1850 */    92,   93,   94,   95,   96,   97,   98,   99,  136,  136,
 /*  1860 */   102,  136,  104,  136,  136,  136,  108,  109,  136,  111,
 /*  1870 */   136,  113,  114,  115,  136,  136,  136,  136,  136,  136,
 /*  1880 */   136,  136,  136,  136,  126,  127,  128,  129,  136,  136,
 /*  1890 */   136,  136,  136,  135,   80,   81,   82,   83,   84,   85,
 /*  1900 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  1910 */    96,   97,   98,   99,  136,  136,  102,  136,  104,  136,
 /*  1920 */   136,  136,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  1930 */   136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  1940 */   126,  127,  128,  129,  136,  136,  136,  136,  136,  135,
 /*  1950 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*  1960 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*  1970 */   136,  136,  102,  136,  104,  136,  136,  136,  108,  109,
 /*  1980 */   136,  111,  136,  113,  114,  115,  136,  136,  136,  136,
 /*  1990 */   136,  136,  136,  136,  136,  136,  126,  127,  128,  129,
 /*  2000 */   136,  136,  136,  136,  136,  135,   80,   81,   82,   83,
 /*  2010 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  2020 */    94,   95,   96,   97,   98,   99,  136,  136,  102,  136,
 /*  2030 */   104,  136,  136,  136,  108,  109,  136,  111,  136,  113,
 /*  2040 */   114,  115,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  2050 */   136,  136,  126,  127,  128,  129,  136,  136,  136,  136,
 /*  2060 */   136,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  2070 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  2080 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*  2090 */   108,  109,  136,  111,  136,  113,  114,  115,  136,  136,
 /*  2100 */   136,  136,  136,  136,  136,  136,  136,  136,  126,  127,
 /*  2110 */   128,  129,  136,  136,  136,  136,  136,  135,   80,   81,
 /*  2120 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*  2130 */    92,   93,   94,   95,   96,   97,   98,   99,  136,  136,
 /*  2140 */   102,  136,  104,  136,  136,  136,  108,  109,  136,  111,
 /*  2150 */   136,  113,  114,  115,  136,  136,  136,  136,  136,  136,
 /*  2160 */   136,  136,  136,  136,  126,  127,  128,  129,  136,  136,
 /*  2170 */   136,  136,  136,  135,   80,   81,   82,   83,   84,   85,
 /*  2180 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  2190 */    96,   97,   98,   99,  136,  136,  102,  136,  104,  136,
 /*  2200 */   136,  136,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  2210 */   136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  2220 */   126,  127,  128,  129,  136,  136,  136,  136,  136,  135,
 /*  2230 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*  2240 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*  2250 */   136,  136,  102,  136,  104,  136,  136,  136,  108,  109,
 /*  2260 */   136,  111,  136,  113,  114,  115,  136,  136,  136,  136,
 /*  2270 */   136,  136,  136,  136,  136,  136,  126,  127,  128,  129,
 /*  2280 */   136,  136,  136,  136,  136,  135,   80,   81,   82,   83,
 /*  2290 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  2300 */    94,   95,   96,   97,   98,   99,  136,  136,  102,  136,
 /*  2310 */   104,  136,  136,  136,  108,  109,  136,  111,  136,  113,
 /*  2320 */   114,  115,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  2330 */   136,  136,  126,  127,  128,  129,  136,  136,  136,  136,
 /*  2340 */   136,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  2350 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  2360 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*  2370 */   108,  109,  136,  111,  136,  113,  114,  115,  136,  136,
 /*  2380 */   136,  136,  136,  136,  136,  136,  136,  136,  126,  127,
 /*  2390 */   128,  129,  136,  136,  136,  136,  136,  135,   80,   81,
 /*  2400 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*  2410 */    92,   93,   94,   95,   96,   97,   98,   99,  136,  136,
 /*  2420 */   102,  136,  104,  136,  136,  136,  108,  109,  136,  111,
 /*  2430 */   136,  113,  114,  115,  136,  136,  136,  136,  136,  136,
 /*  2440 */   136,  136,  136,  136,  126,  127,  128,  129,  136,  136,
 /*  2450 */   136,  136,  136,  135,   80,   81,   82,   83,   84,   85,
 /*  2460 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  2470 */    96,   97,   98,   99,  136,  136,  102,  136,  104,  136,
 /*  2480 */   136,  136,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  2490 */   136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  2500 */   126,  127,  128,  129,  136,  136,  136,  136,  136,  135,
 /*  2510 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*  2520 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*  2530 */   136,  136,  102,  136,  104,  136,  136,  136,  108,  109,
 /*  2540 */   136,  111,  136,  113,  114,  115,  136,  136,  136,  136,
 /*  2550 */   136,  136,  136,  136,  136,  136,  126,  127,  128,  129,
 /*  2560 */   136,  136,  136,  136,  136,  135,   80,   81,   82,   83,
 /*  2570 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  2580 */    94,   95,   96,   97,   98,   99,  136,  136,  102,  136,
 /*  2590 */   104,  136,  136,  136,  108,  109,  136,  111,  136,  113,
 /*  2600 */   114,  115,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  2610 */   136,  136,  126,  127,  128,  129,  136,  136,  136,  136,
 /*  2620 */   136,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  2630 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  2640 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*  2650 */   108,  109,  136,  111,  136,  113,  114,  115,  136,    2,
 /*  2660 */   136,    4,  136,    6,    7,    8,    9,   10,  126,  127,
 /*  2670 */   128,  129,  136,  136,  136,   18,   19,  135,   21,  136,
 /*  2680 */   136,  136,  136,  136,   27,   28,   29,    1,   31,   32,
 /*  2690 */     4,  136,    6,    7,  136,  136,   39,   40,   41,   42,
 /*  2700 */    43,   44,   45,   46,   47,  136,   49,   50,   22,   23,
 /*  2710 */    24,   25,   26,   27,   28,   58,   30,  136,   61,   62,
 /*  2720 */    63,  136,  136,   66,  136,  136,   69,  136,  136,   72,
 /*  2730 */   136,  136,    2,  136,    4,  136,    6,    7,    8,    9,
 /*  2740 */    10,  136,  136,  136,  136,  136,  136,  136,   18,   19,
 /*  2750 */   136,  136,  136,  136,  136,  136,  136,   27,   28,   29,
 /*  2760 */    74,   31,   32,  136,  136,  136,  136,  136,  136,   39,
 /*  2770 */    40,   41,   42,   43,   44,   45,   46,   47,  136,   49,
 /*  2780 */    50,  136,  136,  136,  136,   55,  136,  136,   58,  136,
 /*  2790 */   136,   61,   62,   63,  136,  136,   66,  136,  136,   69,
 /*  2800 */   136,  136,   72,  136,   80,   81,   82,   83,   84,   85,
 /*  2810 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  2820 */    96,   97,   98,   99,  136,  136,  102,  136,  104,  136,
 /*  2830 */   136,  136,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  2840 */   136,    2,  136,    4,  136,    6,    7,    8,    9,   10,
 /*  2850 */   126,  127,  128,  129,  136,  136,  136,   18,   19,  135,
 /*  2860 */    21,  136,  136,  136,  136,  136,   27,   28,   29,    1,
 /*  2870 */    31,   32,    4,  136,    6,    7,  136,  136,   39,   40,
 /*  2880 */    41,   42,   43,   44,   45,   46,   47,  136,   49,   50,
 /*  2890 */   136,   23,   24,   25,   26,   27,   28,   58,   30,  136,
 /*  2900 */    61,   62,   63,  136,  136,   66,  136,  136,   69,  136,
 /*  2910 */   136,   72,  136,  136,    2,  136,    4,  136,    6,    7,
 /*  2920 */     8,    9,   10,   55,  136,  136,  136,  136,  136,  136,
 /*  2930 */    18,   19,  136,   21,  136,  136,  136,  136,  136,   27,
 /*  2940 */    28,   29,   74,   31,   32,  136,  136,  136,  136,  136,
 /*  2950 */   136,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*  2960 */   136,   49,   50,  136,  136,  136,  136,  136,  136,  136,
 /*  2970 */    58,  136,  136,   61,   62,   63,  136,  136,   66,  136,
 /*  2980 */   136,   69,  136,  136,   72,  136,   80,   81,   82,   83,
 /*  2990 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  3000 */    94,   95,   96,   97,   98,   99,  136,  136,  102,  136,
 /*  3010 */   104,  136,  136,  136,  108,  109,  136,  111,  136,  113,
 /*  3020 */   114,  115,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  3030 */   136,  136,  126,  127,  128,  129,  136,  136,  136,  136,
 /*  3040 */   136,  135,   80,   81,   82,   83,   84,   85,   86,   87,
 /*  3050 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  3060 */    98,   99,  136,  136,  102,  136,  104,  136,  136,  136,
 /*  3070 */   108,  109,  136,  111,  136,  113,  114,  115,  136,    2,
 /*  3080 */   136,    4,  136,    6,    7,    8,    9,   10,  126,  127,
 /*  3090 */   128,  129,  136,  136,  136,   18,   19,  135,   21,  136,
 /*  3100 */   136,  136,  136,  136,   27,   28,   29,    1,   31,   32,
 /*  3110 */     4,  136,    6,    7,  136,  136,   39,   40,   41,   42,
 /*  3120 */    43,   44,   45,   46,   47,  136,   49,   50,   22,   23,
 /*  3130 */    24,   25,   26,   27,   28,   58,   30,  136,   61,   62,
 /*  3140 */    63,  136,  136,   66,  136,  136,   69,  136,  136,   72,
 /*  3150 */   136,  136,    2,  136,    4,  136,    6,    7,    8,    9,
 /*  3160 */    10,  136,  136,  136,  136,  136,  136,  136,   18,   19,
 /*  3170 */   136,  136,   22,  136,  136,  136,  136,   27,   28,   29,
 /*  3180 */    74,   31,   32,    4,  136,    6,    7,  136,  136,   39,
 /*  3190 */    40,   41,   42,   43,   44,   45,   46,   47,  136,   49,
 /*  3200 */    50,  136,   23,   24,   25,   26,   27,   28,   58,   30,
 /*  3210 */   136,   61,   62,   63,  136,  136,   66,  136,  136,   69,
 /*  3220 */   136,  136,   72,  136,  136,    2,  136,    4,  136,    6,
 /*  3230 */     7,    8,    9,   10,  136,  136,  136,  136,  136,  136,
 /*  3240 */   136,   18,   19,  136,   21,  136,  136,  136,  136,  136,
 /*  3250 */    27,   28,   29,   74,   31,   32,  136,  136,  136,  136,
 /*  3260 */   136,  136,   39,   40,   41,   42,   43,   44,   45,   46,
 /*  3270 */    47,  136,   49,   50,  136,  136,  136,  136,  136,  136,
 /*  3280 */   136,   58,  136,  136,   61,   62,   63,  136,  136,   66,
 /*  3290 */   136,  136,   69,  136,  136,   72,  136,   80,   81,   82,
 /*  3300 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  3310 */    93,   94,   95,   96,   97,   98,   99,  136,  136,  102,
 /*  3320 */   136,  104,  136,  136,  136,  108,  109,  136,  111,  136,
 /*  3330 */   113,  114,  115,  136,  136,  136,  136,  136,  136,  136,
 /*  3340 */   136,  136,  136,  126,  127,  128,  129,  136,  136,  136,
 /*  3350 */   136,  136,  135,   80,   81,   82,   83,   84,   85,   86,
 /*  3360 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*  3370 */    97,   98,   99,  136,  136,  102,  136,  104,  136,  136,
 /*  3380 */    84,  108,  109,  136,  111,  136,  113,  114,  115,  136,
 /*  3390 */   136,  136,   96,   97,  136,  136,  100,  101,  102,  126,
 /*  3400 */   127,  128,  129,  136,  136,  136,  136,  136,  135,   80,
 /*  3410 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*  3420 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  136,
 /*  3430 */   136,  102,  136,  104,  136,  136,  136,  108,  109,  136,
 /*  3440 */   111,  136,  113,  114,  115,  136,  136,  136,  136,  136,
 /*  3450 */   136,  136,  136,  136,  136,  126,  127,  128,  129,  136,
 /*  3460 */   136,  136,  136,  136,  135,   80,   81,   82,   83,   84,
 /*  3470 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  3480 */    95,   96,   97,   98,   99,  136,  136,  102,  136,  104,
 /*  3490 */   136,  136,  136,  108,  109,  136,  111,  136,  113,  114,
 /*  3500 */   115,  136,  136,  136,  136,  136,  136,  136,  136,  136,
 /*  3510 */   136,  126,  127,  128,  129,  136,  136,  136,  136,  136,
 /*  3520 */   135,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*  3530 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*  3540 */    99,  136,  136,  102,  136,  104,  136,  136,  136,  108,
 /*  3550 */   109,  136,  111,  136,  113,  114,  115,  136,  136,  136,
 /*  3560 */   136,  136,  136,  136,  136,  136,  136,  126,  127,  128,
 /*  3570 */   129,  136,  136,  136,  136,  136,  135,   80,   81,   82,
 /*  3580 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  3590 */    93,   94,   95,   96,   97,   98,   99,  136,  136,  102,
 /*  3600 */   136,  104,  136,  136,  136,  108,  109,  136,  111,  136,
 /*  3610 */   113,  114,  115,  136,  136,  136,  136,  136,  136,  136,
 /*  3620 */   136,  136,  136,  126,  127,  128,  129,  136,  136,  136,
 /*  3630 */   136,  136,  135,   80,   81,   82,   83,   84,   85,   86,
 /*  3640 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*  3650 */    97,   98,   99,  136,  136,  102,  136,  104,  136,  136,
 /*  3660 */   136,  108,  109,  136,  111,  136,  113,  114,  115,  136,
 /*  3670 */   136,  136,  136,  136,  136,  136,  136,  136,  136,  126,
 /*  3680 */   127,  128,  129,  136,  136,  136,  136,  136,  135,   80,
 /*  3690 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*  3700 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  136,
 /*  3710 */   136,  102,  136,  104,  136,  136,  136,  108,  109,  136,
 /*  3720 */   111,  136,  113,  114,  115,  136,    2,  136,    4,  136,
 /*  3730 */     6,    7,    8,    9,   10,  126,  127,  128,  129,  136,
 /*  3740 */   136,  136,   18,   19,  135,   21,  136,  136,  136,  136,
 /*  3750 */   136,   27,   28,   29,  136,   31,   32,  136,   35,   36,
 /*  3760 */    37,  136,  136,   39,   40,   41,   42,   43,   44,   45,
 /*  3770 */    46,   47,  136,   49,   50,  136,  136,   54,  136,   56,
 /*  3780 */    57,  136,   58,   60,  136,   61,   62,   63,  136,  136,
 /*  3790 */    66,  136,  136,   69,  136,  136,   72,  136,   80,   81,
 /*  3800 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*  3810 */    92,   93,   94,   95,   96,   97,   98,   99,  136,  136,
 /*  3820 */   102,  136,  104,  136,  136,  136,  108,  109,  136,  111,
 /*  3830 */   136,  113,  114,  115,    2,  136,    4,  136,    6,    7,
 /*  3840 */     8,    9,   10,  136,  126,  127,  128,  129,  136,  136,
 /*  3850 */    18,   19,  136,  135,  136,  136,  136,  136,  136,   27,
 /*  3860 */    28,   29,  136,   31,   32,  136,  136,  136,  136,  136,
 /*  3870 */   136,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*  3880 */     2,   49,   50,  136,  136,  136,    8,    9,   10,  136,
 /*  3890 */    58,  136,  136,   61,   62,   63,   18,   19,   66,  136,
 /*  3900 */   136,   69,  136,  136,   72,   27,   28,   29,    1,   31,
 /*  3910 */    32,    4,  136,    6,    7,  136,  136,   39,   40,   41,
 /*  3920 */    42,   43,   44,   45,   46,   47,  136,   49,   50,  136,
 /*  3930 */    23,   24,   25,   26,   27,   28,   58,   30,  136,   61,
 /*  3940 */    62,   63,  136,    9,   66,  136,  136,   69,  136,  136,
 /*  3950 */    72,  136,  136,  136,   20,   21,  136,  136,  136,  136,
 /*  3960 */    53,  136,   55,  136,    1,  136,  136,    4,  136,    6,
 /*  3970 */     7,  136,   65,  136,   40,   41,   42,   43,   44,   45,
 /*  3980 */   136,   74,  136,  136,  136,  136,   23,   24,   25,   26,
 /*  3990 */    27,   28,   58,   30,  136,   61,   62,   63,  136,   78,
 /*  4000 */   136,  136,  136,   69,  136,  136,   85,   86,  136,  136,
 /*  4010 */   136,  136,  136,  136,  136,  136,   53,   96,   97,   98,
 /*  4020 */    99,    1,  136,  102,    4,  136,    6,    7,   65,  108,
 /*  4030 */   109,  136,  111,  136,  113,  114,  115,   74,  136,  136,
 /*  4040 */   136,   21,  136,   23,   24,   25,   26,   27,   28,    1,
 /*  4050 */    30,  136,    4,  136,    6,    7,  136,    1,  136,  136,
 /*  4060 */     4,  136,    6,    7,   33,  136,   35,   36,   37,   21,
 /*  4070 */   136,   23,   24,   25,   26,   27,   28,  136,   30,   23,
 /*  4080 */    24,   25,   26,   27,   28,   54,   30,   56,   57,  136,
 /*  4090 */   136,   60,  136,  136,   74,  136,  136,  136,  136,  136,
 /*  4100 */    33,  136,   35,   36,   37,  136,  136,  136,  136,  136,
 /*  4110 */   136,   55,  136,    1,  136,  136,    4,  136,    6,    7,
 /*  4120 */   136,   54,   74,   56,   57,  136,  136,   60,  136,  136,
 /*  4130 */    74,  136,   85,   86,  136,   23,   24,   25,   26,   27,
 /*  4140 */    28,  136,   30,   96,   97,   98,   99,  136,  136,  102,
 /*  4150 */   136,  136,  136,  136,  136,  108,  109,  136,  111,  136,
 /*  4160 */   113,  114,  115,  136,   85,   86,  136,   55,  136,  136,
 /*  4170 */   136,  136,  136,  136,  136,   96,   97,   98,   99,    1,
 /*  4180 */   136,  102,    4,  136,    6,    7,   74,  108,  109,  136,
 /*  4190 */   111,  136,  113,  114,  115,  136,  136,  136,  136,   85,
 /*  4200 */    86,   23,   24,   25,   26,   27,   28,  136,   30,  136,
 /*  4210 */    96,   97,   98,   99,  136,  136,  102,  136,  136,   85,
 /*  4220 */    86,  136,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  4230 */    96,   97,   98,   99,    1,  136,  102,    4,  136,    6,
 /*  4240 */     7,    9,  108,  109,  136,  111,  136,  113,  114,  115,
 /*  4250 */   136,  136,   74,  136,  136,   22,   23,   24,   25,   26,
 /*  4260 */    27,   28,    1,   30,  136,    4,  136,    6,    7,  136,
 /*  4270 */   136,  136,   40,   41,   42,   43,   44,   45,  136,  136,
 /*  4280 */   136,  136,  136,  136,   23,   24,   25,   26,   27,   28,
 /*  4290 */    58,   30,  136,   61,   62,   63,    4,  136,    6,    7,
 /*  4300 */   136,   69,  136,  136,  136,  136,   14,   74,  136,  136,
 /*  4310 */   136,  136,  136,  136,   53,   23,   24,   25,   26,   27,
 /*  4320 */    28,    4,   30,    6,    7,  136,  136,  136,  136,  136,
 /*  4330 */   136,   14,  136,  136,  136,   74,   20,   21,  136,  136,
 /*  4340 */    23,   24,   25,   26,   27,   28,   21,   30,  136,   33,
 /*  4350 */   136,   35,   36,   37,  136,  136,  136,  136,   33,  136,
 /*  4360 */    35,   36,   37,  136,  136,  136,   74,  136,  136,  136,
 /*  4370 */    54,   84,   56,   57,  136,  136,   60,  136,  136,   54,
 /*  4380 */    84,   56,   57,   96,   97,   60,  136,  100,  101,  102,
 /*  4390 */    96,   74,   96,   97,  136,  136,  100,  101,  102,  136,
 /*  4400 */   136,  136,  108,  109,  136,  118,  136,  136,  114,  136,
 /*  4410 */   136,  136,  136,  136,  118,  136,  136,  136,  136,  136,
 /*  4420 */   136,  136,  136,  136,  136,  131,  132,
);
    const YY_SHIFT_USE_DFLT = -1;
    const YY_SHIFT_MAX = 187;
    static public $yy_shift_ofst = array(
 /*     0 */  2657,  980,  907,  907, 3077, 3077, 3150, 3223, 3832, 3832,
 /*    10 */  3832,  834, 2657, 3832, 3832, 2730, 2912, 2839, 3724, 3832,
 /*    20 */  3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832,
 /*    30 */  3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832,
 /*    40 */  3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832, 3832,
 /*    50 */  3832, 3832, 3832, 3832, 3832, 3878, 3934, 4232, 4232, 4232,
 /*    60 */  4232,  848,  848,  955,  848,  848,  153,  955, 4325, 4325,
 /*    70 */   271, 3907, 3963, 4048, 4048, 4067, 4067, 3723, 3723,  271,
 /*    80 */   936, 4020, 4233, 4261, 3106, 2868, 2686, 4112, 4056, 4178,
 /*    90 */  4178, 4178, 4317, 4178, 4292, 4178, 4178, 4178, 4178, 3179,
 /*   100 */  3179, 3179,  356,  641,  584,   18,  415,  415,  415,  415,
 /*   110 */   415,  415,  415,  415,  698,  753,  294,   23,   69,   23,
 /*   120 */     6,    6,    6,    6,    6,  290,  290, 4316,   29,   29,
 /*   130 */   429,  363,  135,   90,  255,  211,  186,   74,  181,   66,
 /*   140 */    66,   74,   74,   74,   66,  375,  402,  375,  375,  402,
 /*   150 */    66,  375,  181,  181,   74,   74,   66,   66,   66,   66,
 /*   160 */    66,   66, 4031, 4031,  880,  178,  575,  689,  187,  475,
 /*   170 */   288,  416,  226,   11,    7,  152,  285,   19,  306,  319,
 /*   180 */   161,  266,  244,  257,  190,  159,  217,  198,
);
    const YY_REDUCE_USE_DFLT = -77;
    const YY_REDUCE_MAX = 161;
    static public $yy_reduce_ofst = array(
 /*     0 */   -76,  204,   92,  148,  -20,   36,  263,  491,  320,  377,
 /*    10 */   434,  548,  720,  605,  662, 2724, 3273, 3217, 3718, 3553,
 /*    20 */  2486, 3385, 3497, 2038, 1310, 1422, 1590, 1534, 1198, 1030,
 /*    30 */  1086,  974, 2430, 2206, 2262, 2318, 1758, 1926, 1982, 1870,
 /*    40 */  2094, 3329, 1814, 2150, 2374, 1702, 1646, 1142, 1254, 1478,
 /*    50 */  1366, 3441, 3609, 2542, 2906, 2962, 3921, 4134, 4079, 4047,
 /*    60 */  4114, 4296, 4287,  988, 1053, 3296, 4294,   46,  916,  752,
 /*    70 */   884,  144,  -24,   32,  139,  439,  382,  382,  439,    4,
 /*    80 */   -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
 /*    90 */   -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
 /*   100 */   -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
 /*   110 */   -72,  -72,  -72,  -72,  -72,  -72,  -72,   40,  -72,   40,
 /*   120 */   -72,  -72,  -72,  -72,  -72,  145,  147,  345,  304,  280,
 /*   130 */   253,  253,  316,  315,  291,  297,  296,  268,  221,  295,
 /*   140 */   310,  279,  384,  -49,  406,  378,  351,  347,  339,  372,
 /*   150 */   404,  373,  305,   50,   43,  -49,  119,  114,  260,  -53,
 /*   160 */   259,  238,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 1 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 2 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 64, 66, 69, 72, ),
        /* 3 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 64, 66, 69, 72, ),
        /* 4 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 5 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 6 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 22, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 7 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 8 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 9 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 10 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 11 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 58, 61, 62, 63, 65, 66, 69, 72, ),
        /* 12 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 13 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 14 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 15 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 55, 58, 61, 62, 63, 66, 69, 72, ),
        /* 16 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 17 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 18 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 21, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 19 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 20 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 21 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 22 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 23 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 24 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 25 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 26 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 27 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 28 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 29 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 30 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 31 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 32 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 33 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 34 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 35 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 36 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 37 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 38 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 39 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 40 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 41 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 42 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 43 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 44 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 45 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 46 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 47 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 48 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 49 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 50 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 51 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 52 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 53 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 54 */ array(2, 4, 6, 7, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 55 */ array(2, 8, 9, 10, 18, 19, 27, 28, 29, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 58, 61, 62, 63, 66, 69, 72, ),
        /* 56 */ array(9, 20, 21, 40, 41, 42, 43, 44, 45, 58, 61, 62, 63, 69, ),
        /* 57 */ array(9, 40, 41, 42, 43, 44, 45, 58, 61, 62, 63, 69, ),
        /* 58 */ array(9, 40, 41, 42, 43, 44, 45, 58, 61, 62, 63, 69, ),
        /* 59 */ array(9, 40, 41, 42, 43, 44, 45, 58, 61, 62, 63, 69, ),
        /* 60 */ array(9, 40, 41, 42, 43, 44, 45, 58, 61, 62, 63, 69, ),
        /* 61 */ array(40, 41, 42, 46, 62, ),
        /* 62 */ array(40, 41, 42, 46, 62, ),
        /* 63 */ array(40, 58, 62, 63, ),
        /* 64 */ array(40, 41, 42, 46, 62, ),
        /* 65 */ array(40, 41, 42, 46, 62, ),
        /* 66 */ array(40, 58, 63, 71, ),
        /* 67 */ array(40, 58, 62, 63, ),
        /* 68 */ array(21, 33, 35, 36, 37, 54, 56, 57, 60, ),
        /* 69 */ array(21, 33, 35, 36, 37, 54, 56, 57, 60, ),
        /* 70 */ array(40, 58, 63, ),
        /* 71 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 53, 55, 65, 74, ),
        /* 72 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 53, 65, 74, ),
        /* 73 */ array(1, 4, 6, 7, 21, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 74 */ array(1, 4, 6, 7, 21, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 75 */ array(33, 35, 36, 37, 54, 56, 57, 60, ),
        /* 76 */ array(33, 35, 36, 37, 54, 56, 57, 60, ),
        /* 77 */ array(35, 36, 37, 54, 56, 57, 60, ),
        /* 78 */ array(35, 36, 37, 54, 56, 57, 60, ),
        /* 79 */ array(40, 58, 63, ),
        /* 80 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 64, 74, ),
        /* 81 */ array(1, 4, 6, 7, 21, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 82 */ array(1, 4, 6, 7, 22, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 83 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 53, 74, ),
        /* 84 */ array(1, 4, 6, 7, 22, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 85 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 55, 74, ),
        /* 86 */ array(1, 4, 6, 7, 22, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 87 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 55, 74, ),
        /* 88 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 55, 74, ),
        /* 89 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 90 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 91 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 92 */ array(4, 6, 7, 14, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 93 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 94 */ array(4, 6, 7, 14, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 95 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 96 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 97 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 98 */ array(1, 4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 99 */ array(4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 100 */ array(4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 101 */ array(4, 6, 7, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 102 */ array(13, 14, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 103 */ array(14, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 104 */ array(14, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 105 */ array(13, 23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 106 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 107 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 108 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 109 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 110 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 111 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 112 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 113 */ array(23, 24, 25, 26, 27, 28, 30, 74, ),
        /* 114 */ array(24, 25, 26, 27, 28, 30, 74, ),
        /* 115 */ array(25, 26, 27, 28, 30, 74, ),
        /* 116 */ array(26, 27, 28, 30, 74, ),
        /* 117 */ array(1, 4, 6, 7, ),
        /* 118 */ array(27, 28, 30, 74, ),
        /* 119 */ array(1, 4, 6, 7, ),
        /* 120 */ array(30, 74, ),
        /* 121 */ array(30, 74, ),
        /* 122 */ array(30, 74, ),
        /* 123 */ array(30, 74, ),
        /* 124 */ array(30, 74, ),
        /* 125 */ array(73, ),
        /* 126 */ array(73, ),
        /* 127 */ array(20, 21, 33, 35, 36, 37, 54, 56, 57, 60, ),
        /* 128 */ array(54, 56, 57, ),
        /* 129 */ array(54, 56, 57, ),
        /* 130 */ array(3, 22, 73, ),
        /* 131 */ array(3, 22, 73, ),
        /* 132 */ array(2, 21, ),
        /* 133 */ array(21, 51, ),
        /* 134 */ array(49, 50, ),
        /* 135 */ array(11, 12, ),
        /* 136 */ array(67, 68, ),
        /* 137 */ array(40, ),
        /* 138 */ array(33, ),
        /* 139 */ array(21, ),
        /* 140 */ array(21, ),
        /* 141 */ array(40, ),
        /* 142 */ array(40, ),
        /* 143 */ array(40, ),
        /* 144 */ array(21, ),
        /* 145 */ array(51, ),
        /* 146 */ array(51, ),
        /* 147 */ array(51, ),
        /* 148 */ array(51, ),
        /* 149 */ array(51, ),
        /* 150 */ array(21, ),
        /* 151 */ array(51, ),
        /* 152 */ array(33, ),
        /* 153 */ array(33, ),
        /* 154 */ array(40, ),
        /* 155 */ array(40, ),
        /* 156 */ array(21, ),
        /* 157 */ array(21, ),
        /* 158 */ array(21, ),
        /* 159 */ array(21, ),
        /* 160 */ array(21, ),
        /* 161 */ array(21, ),
        /* 162 */ array(33, 35, 36, 37, 54, 56, 57, 60, ),
        /* 163 */ array(33, 35, 36, 37, 54, 56, 57, 60, ),
        /* 164 */ array(21, 38, 51, 64, ),
        /* 165 */ array(17, 20, 31, 32, ),
        /* 166 */ array(21, 22, 38, ),
        /* 167 */ array(21, 22, 38, ),
        /* 168 */ array(21, 38, 64, ),
        /* 169 */ array(21, 38, 59, ),
        /* 170 */ array(21, 22, 38, ),
        /* 171 */ array(21, 34, 38, ),
        /* 172 */ array(22, 38, ),
        /* 173 */ array(38, 70, ),
        /* 174 */ array(48, 51, ),
        /* 175 */ array(15, 52, ),
        /* 176 */ array(22, 38, ),
        /* 177 */ array(15, 21, ),
        /* 178 */ array(22, ),
        /* 179 */ array(16, ),
        /* 180 */ array(38, ),
        /* 181 */ array(70, ),
        /* 182 */ array(38, ),
        /* 183 */ array(3, ),
        /* 184 */ array(22, ),
        /* 185 */ array(67, ),
        /* 186 */ array(38, ),
        /* 187 */ array(51, ),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
);
    static public $yy_default = array(
 /*     0 */   318,  511,  511,  511,  511,  511,  511,  511,  511,  511,
 /*    10 */   367,  511,  511,  323,  511,  511,  511,  511,  511,  511,
 /*    20 */   511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
 /*    30 */   511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
 /*    40 */   511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
 /*    50 */   511,  511,  511,  511,  511,  360,  406,  511,  511,  511,
 /*    60 */   511,  401,  401,  368,  511,  367,  511,  511,  412,  408,
 /*    70 */   511,  511,  438,  511,  511,  330,  331,  418,  418,  511,
 /*    80 */   511,  511,  511,  438,  511,  511,  511,  511,  511,  440,
 /*    90 */   441,  491,  450,  353,  452,  324,  373,  503,  492,  459,
 /*   100 */   451,  453,  472,  476,  473,  474,  475,  447,  477,  510,
 /*   110 */   508,  478,  359,  350,  506,  505,  507,  511,  504,  325,
 /*   120 */   495,  501,  502,  494,  493,  511,  511,  410,  511,  511,
 /*   130 */   511,  511,  511,  511,  511,  511,  442,  511,  511,  511,
 /*   140 */   511,  511,  394,  423,  511,  366,  366,  366,  366,  366,
 /*   150 */   511,  366,  511,  416,  511,  511,  511,  511,  511,  511,
 /*   160 */   511,  511,  497,  496,  428,  383,  511,  511,  511,  511,
 /*   170 */   511,  511,  511,  511,  511,  371,  511,  386,  511,  352,
 /*   180 */   511,  511,  485,  489,  511,  443,  319,  470,  346,  347,
 /*   190 */   356,  348,  349,  376,  461,  358,  357,  355,  345,  337,
 /*   200 */   338,  456,  369,  336,  335,  339,  344,  340,  377,  354,
 /*   210 */   465,  343,  428,  380,  398,  397,  392,  351,  391,  430,
 /*   220 */   431,  326,  322,  320,  327,  432,  329,  328,  393,  395,
 /*   230 */   332,  402,  405,  404,  333,  403,  400,  463,  375,  469,
 /*   240 */   396,  471,  468,  467,  381,  466,  334,  413,  389,  415,
 /*   250 */   419,  390,  399,  378,  414,  386,  388,  385,  481,  482,
 /*   260 */   387,  483,  490,  486,  417,  488,  444,  462,  445,  446,
 /*   270 */   448,  454,  449,  479,  480,  487,  424,  422,  427,  429,
 /*   280 */   484,  500,  458,  384,  460,  455,  409,  407,  383,  363,
 /*   290 */   457,  342,  321,  370,  372,  464,  361,  362,  509,  341,
 /*   300 */   411,  364,  439,  426,  435,  434,  498,  499,  425,  382,
 /*   310 */   433,  420,  421,  365,  436,  437,  379,  374,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 137;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 318;
    const YYNRULE = 193;
    const YYERRORSYMBOL = 75;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx = -1;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    static public $yyTokenName = array( 
  '$',             'YY_POST_IF',    'YY_IF',         'YY_ELSE',     
  'YY_FOR',        'YY_DO',         'YY_WHILE',      'YY_UNTIL',    
  'YY_LOOP',       'YY_SUPER',      'YY_CLASS',      'YY_FORIN',    
  'YY_FOROF',      'YY_BY',         'YY_WHEN',       'YY_EQUALS',   
  'YY_COLON',      'YY_COMPOUND_ASSIGN',  'YY_RETURN',     'YY_THROW',    
  'YY_EXTENDS',    'YY_INDENT',     'YY_OUTDENT',    'YY_LOGIC',    
  'YY_COMPARE',    'YY_RELATION',   'YY_SHIFT',      'YY_PLUS',     
  'YY_MINUS',      'YY_UNARY',      'YY_EXISTENTIAL',  'YY_INCREMENT',
  'YY_DECREMENT',  'YY_CALL_START',  'YY_CALL_END',   'YY_ACCESSOR', 
  'YY_EXISTENTIAL_ACCESSOR',  'YY_PROTOTYPE',  'YY_TERMINATOR',  'YY_STATEMENT',
  'YY_IDENTIFIER',  'YY_NUMBER',     'YY_STRING',     'YY_JS',       
  'YY_REGEX',      'YY_BOOL',       'YY_HERECOMMENT',  'YY_PARAM_START',
  'YY_PARAM_END',  'YY_FUNC',       'YY_BOUND_FUNC',  'YY_COMMA',    
  'YY_ELLIPSIS',   'YY_RANGE_EXCLUSIVE',  'YY_INDEX_START',  'YY_INDEX_END',
  'YY_INDEX_SOAK',  'YY_INDEX_PROTO',  'YY_OBJECT_START',  'YY_OBJECT_END',
  'YY_FUNC_EXIST',  'YY_THIS',       'YY_AMPERSAND',  'YY_ARRAY_START',
  'YY_ARRAY_END',  'YY_RANGE_INCLUSIVE',  'YY_TRY',        'YY_FINALLY',  
  'YY_CATCH',      'YY_PAREN_START',  'YY_PAREN_END',  'YY_OWN',      
  'YY_SWITCH',     'YY_LEADING_WHEN',  'YY_MATH',       'error',       
  'root',          'body',          'block',         'line',        
  'expression',    'statement',     'return',        'throw',       
  'comment',       'value',         'invocation',    'code',        
  'operation',     'assign',        'if',            'try',         
  'while',         'for',           'switch',        'class',       
  'identifier',    'alphanumeric',  'literal',       'assignable',  
  'assignObj',     'objAssignable',  'thisProperty',  'paramList',   
  'funcGlyph',     'optComma',      'param',         'paramVar',    
  'array',         'object',        'splat',         'simpleAssignable',
  'accessor',      'parenthetical',  'range',         'this',        
  'index',         'slice',         'assignList',    'optFuncExist',
  'arguments',     'argList',       'rangeDots',     'arg',         
  'simpleArgs',    'catch',         'whileSource',   'loop',        
  'forBody',       'forStart',      'forSource',     'forVariables',
  'forValue',      'whens',         'when',          'ifBlock',     
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "root ::=",
 /*   1 */ "root ::= body",
 /*   2 */ "root ::= block YY_TERMINATOR",
 /*   3 */ "body ::= line",
 /*   4 */ "body ::= body YY_TERMINATOR line",
 /*   5 */ "body ::= body YY_TERMINATOR",
 /*   6 */ "line ::= expression",
 /*   7 */ "line ::= statement",
 /*   8 */ "statement ::= return",
 /*   9 */ "statement ::= throw",
 /*  10 */ "statement ::= comment",
 /*  11 */ "statement ::= YY_STATEMENT",
 /*  12 */ "expression ::= value",
 /*  13 */ "expression ::= invocation",
 /*  14 */ "expression ::= code",
 /*  15 */ "expression ::= operation",
 /*  16 */ "expression ::= assign",
 /*  17 */ "expression ::= if",
 /*  18 */ "expression ::= try",
 /*  19 */ "expression ::= while",
 /*  20 */ "expression ::= for",
 /*  21 */ "expression ::= switch",
 /*  22 */ "expression ::= class",
 /*  23 */ "block ::= YY_INDENT YY_OUTDENT",
 /*  24 */ "block ::= YY_INDENT body YY_OUTDENT",
 /*  25 */ "identifier ::= YY_IDENTIFIER",
 /*  26 */ "alphanumeric ::= YY_NUMBER",
 /*  27 */ "alphanumeric ::= YY_STRING",
 /*  28 */ "literal ::= alphanumeric",
 /*  29 */ "literal ::= YY_JS",
 /*  30 */ "literal ::= YY_REGEX",
 /*  31 */ "literal ::= YY_BOOL",
 /*  32 */ "assign ::= assignable YY_EQUALS expression",
 /*  33 */ "assign ::= assignable YY_INDENT expression YY_OUTDENT",
 /*  34 */ "assignObj ::= objAssignable",
 /*  35 */ "assignObj ::= objAssignable YY_COLON expression",
 /*  36 */ "assignObj ::= objAssignable YY_COLON YY_INDENT expression YY_OUTDENT",
 /*  37 */ "assignObj ::= comment",
 /*  38 */ "objAssignable ::= identifier",
 /*  39 */ "objAssignable ::= alphanumeric",
 /*  40 */ "objAssignable ::= thisProperty",
 /*  41 */ "return ::= YY_RETURN expression",
 /*  42 */ "return ::= YY_RETURN",
 /*  43 */ "comment ::= YY_HERECOMMENT",
 /*  44 */ "code ::= YY_PARAM_START paramList YY_PARAM_END funcGlyph block",
 /*  45 */ "code ::= funcGlyph block",
 /*  46 */ "funcGlyph ::= YY_FUNC",
 /*  47 */ "funcGlyph ::= YY_BOUND_FUNC",
 /*  48 */ "optComma ::=",
 /*  49 */ "optComma ::= YY_COMMA",
 /*  50 */ "paramList ::=",
 /*  51 */ "paramList ::= param",
 /*  52 */ "paramList ::= paramList YY_COMMA param",
 /*  53 */ "param ::= paramVar",
 /*  54 */ "param ::= paramVar YY_ELLIPSIS",
 /*  55 */ "param ::= paramVar YY_EQUALS expression",
 /*  56 */ "paramVar ::= identifier",
 /*  57 */ "paramVar ::= thisProperty",
 /*  58 */ "paramVar ::= array",
 /*  59 */ "paramVar ::= object",
 /*  60 */ "splat ::= expression YY_RANGE_EXCLUSIVE",
 /*  61 */ "simpleAssignable ::= identifier",
 /*  62 */ "simpleAssignable ::= value accessor",
 /*  63 */ "simpleAssignable ::= invocation accessor",
 /*  64 */ "simpleAssignable ::= thisProperty",
 /*  65 */ "assignable ::= simpleAssignable",
 /*  66 */ "assignable ::= array",
 /*  67 */ "assignable ::= object",
 /*  68 */ "value ::= assignable",
 /*  69 */ "value ::= literal",
 /*  70 */ "value ::= parenthetical",
 /*  71 */ "value ::= range",
 /*  72 */ "value ::= this",
 /*  73 */ "accessor ::= YY_ACCESSOR identifier",
 /*  74 */ "accessor ::= YY_EXISTENTIAL_ACCESSOR identifier",
 /*  75 */ "accessor ::= YY_PROTOTYPE identifier",
 /*  76 */ "accessor ::= YY_PROTOTYPE",
 /*  77 */ "accessor ::= index",
 /*  78 */ "accessor ::= slice",
 /*  79 */ "index ::= YY_INDEX_START expression YY_INDEX_END",
 /*  80 */ "index ::= YY_INDEX_SOAK index",
 /*  81 */ "index ::= YY_INDEX_PROTO index",
 /*  82 */ "object ::= YY_OBJECT_START assignList optComma YY_OBJECT_END",
 /*  83 */ "assignList ::=",
 /*  84 */ "assignList ::= assignObj",
 /*  85 */ "assignList ::= assignList YY_COMMA assignObj",
 /*  86 */ "assignList ::= assignList optComma YY_TERMINATOR assignObj",
 /*  87 */ "assignList ::= assignList optComma YY_INDENT assignList optComma YY_OUTDENT",
 /*  88 */ "class ::= YY_CLASS",
 /*  89 */ "class ::= YY_CLASS block",
 /*  90 */ "class ::= YY_CLASS YY_EXTENDS value",
 /*  91 */ "class ::= YY_CLASS YY_EXTENDS value block",
 /*  92 */ "class ::= YY_CLASS simpleAssignable",
 /*  93 */ "class ::= YY_CLASS simpleAssignable block",
 /*  94 */ "class ::= YY_CLASS simpleAssignable YY_EXTENDS value",
 /*  95 */ "class ::= YY_CLASS simpleAssignable YY_EXTENDS value block",
 /*  96 */ "invocation ::= value optFuncExist arguments",
 /*  97 */ "invocation ::= invocation optFuncExist arguments",
 /*  98 */ "invocation ::= YY_SUPER",
 /*  99 */ "invocation ::= YY_SUPER arguments",
 /* 100 */ "optFuncExist ::=",
 /* 101 */ "optFuncExist ::= YY_FUNC_EXIST",
 /* 102 */ "arguments ::= YY_CALL_START YY_CALL_END",
 /* 103 */ "arguments ::= YY_CALL_START argList optComma YY_CALL_END",
 /* 104 */ "this ::= YY_THIS",
 /* 105 */ "this ::= YY_AMPERSAND",
 /* 106 */ "thisProperty ::= YY_AMPERSAND identifier",
 /* 107 */ "array ::= YY_ARRAY_START YY_ARRAY_END",
 /* 108 */ "array ::= YY_ARRAY_START argList optComma YY_ARRAY_END",
 /* 109 */ "rangeDots ::= YY_RANGE_INCLUSIVE",
 /* 110 */ "rangeDots ::= YY_RANGE_EXCLUSIVE",
 /* 111 */ "range ::= YY_ARRAY_START expression rangeDots expression YY_ARRAY_END",
 /* 112 */ "slice ::= YY_INDEX_START expression rangeDots expression YY_INDEX_END",
 /* 113 */ "slice ::= YY_INDEX_START expression rangeDots YY_INDEX_END",
 /* 114 */ "slice ::= YY_INDEX_START rangeDots expression YY_INDEX_END",
 /* 115 */ "argList ::= arg",
 /* 116 */ "argList ::= argList YY_COMMA arg",
 /* 117 */ "argList ::= argList optComma YY_TERMINATOR arg",
 /* 118 */ "argList ::= YY_INDENT argList optComma YY_OUTDENT",
 /* 119 */ "argList ::= argList optComma YY_INDENT argList optComma YY_OUTDENT",
 /* 120 */ "arg ::= expression",
 /* 121 */ "arg ::= splat",
 /* 122 */ "simpleArgs ::= expression",
 /* 123 */ "simpleArgs ::= simpleArgs YY_COMMA expression",
 /* 124 */ "try ::= YY_TRY block",
 /* 125 */ "try ::= YY_TRY block catch",
 /* 126 */ "try ::= YY_TRY block YY_FINALLY block",
 /* 127 */ "try ::= YY_TRY block catch YY_FINALLY block",
 /* 128 */ "catch ::= YY_CATCH identifier block",
 /* 129 */ "throw ::= YY_THROW expression",
 /* 130 */ "parenthetical ::= YY_PAREN_START body YY_PAREN_END",
 /* 131 */ "parenthetical ::= YY_PAREN_START YY_INDENT body YY_OUTDENT YY_PAREN_END",
 /* 132 */ "whileSource ::= YY_WHILE expression",
 /* 133 */ "whileSource ::= YY_WHILE expression YY_WHEN expression",
 /* 134 */ "whileSource ::= YY_UNTIL expression",
 /* 135 */ "whileSource ::= YY_UNTIL expression YY_WHEN expression",
 /* 136 */ "while ::= whileSource block",
 /* 137 */ "while ::= statement whileSource",
 /* 138 */ "while ::= expression whileSource",
 /* 139 */ "while ::= loop",
 /* 140 */ "loop ::= YY_LOOP block",
 /* 141 */ "loop ::= YY_LOOP expression",
 /* 142 */ "for ::= statement forBody",
 /* 143 */ "for ::= expression forBody",
 /* 144 */ "for ::= forBody block",
 /* 145 */ "forBody ::= YY_FOR range",
 /* 146 */ "forBody ::= forStart forSource",
 /* 147 */ "forStart ::= YY_FOR forVariables",
 /* 148 */ "forStart ::= YY_FOR YY_OWN forVariables",
 /* 149 */ "forValue ::= identifier",
 /* 150 */ "forValue ::= array",
 /* 151 */ "forValue ::= object",
 /* 152 */ "forVariables ::= forValue",
 /* 153 */ "forVariables ::= forValue YY_COMMA forValue",
 /* 154 */ "forSource ::= YY_FORIN expression",
 /* 155 */ "forSource ::= YY_FOROF expression",
 /* 156 */ "forSource ::= YY_FORIN expression YY_WHEN expression",
 /* 157 */ "forSource ::= YY_FOROF expression YY_WHEN expression",
 /* 158 */ "forSource ::= YY_FORIN expression YY_BY expression",
 /* 159 */ "forSource ::= YY_FORIN expression YY_WHEN expression YY_BY expression",
 /* 160 */ "forSource ::= YY_FORIN expression YY_BY expression YY_WHEN expression",
 /* 161 */ "switch ::= YY_SWITCH expression YY_INDENT whens YY_OUTDENT",
 /* 162 */ "switch ::= YY_SWITCH expression YY_INDENT whens YY_ELSE block YY_OUTDENT",
 /* 163 */ "switch ::= YY_SWITCH YY_INDENT whens YY_OUTDENT",
 /* 164 */ "switch ::= YY_SWITCH YY_INDENT whens YY_ELSE block YY_OUTDENT",
 /* 165 */ "whens ::= when",
 /* 166 */ "whens ::= whens when",
 /* 167 */ "when ::= YY_LEADING_WHEN simpleArgs block",
 /* 168 */ "when ::= YY_LEADING_WHEN simpleArgs block YY_TERMINATOR",
 /* 169 */ "ifBlock ::= YY_IF expression block",
 /* 170 */ "ifBlock ::= ifBlock YY_ELSE YY_IF expression block",
 /* 171 */ "if ::= ifBlock",
 /* 172 */ "if ::= ifBlock YY_ELSE block",
 /* 173 */ "if ::= statement YY_POST_IF expression",
 /* 174 */ "if ::= expression YY_POST_IF expression",
 /* 175 */ "operation ::= YY_UNARY expression",
 /* 176 */ "operation ::= YY_MINUS expression",
 /* 177 */ "operation ::= YY_PLUS expression",
 /* 178 */ "operation ::= YY_DECREMENT simpleAssignable",
 /* 179 */ "operation ::= YY_INCREMENT simpleAssignable",
 /* 180 */ "operation ::= simpleAssignable YY_DECREMENT",
 /* 181 */ "operation ::= simpleAssignable YY_INCREMENT",
 /* 182 */ "operation ::= expression YY_EXISTENTIAL",
 /* 183 */ "operation ::= expression YY_PLUS expression",
 /* 184 */ "operation ::= expression YY_MINUS expression",
 /* 185 */ "operation ::= expression YY_MATH expression",
 /* 186 */ "operation ::= expression YY_SHIFT expression",
 /* 187 */ "operation ::= expression YY_COMPARE expression",
 /* 188 */ "operation ::= expression YY_LOGIC expression",
 /* 189 */ "operation ::= expression YY_RELATION expression",
 /* 190 */ "operation ::= simpleAssignable YY_COMPOUND_ASSIGN expression",
 /* 191 */ "operation ::= simpleAssignable YY_COMPOUND_ASSIGN YY_INDENT expression YY_OUTDENT",
 /* 192 */ "operation ::= simpleAssignable YY_EXTENDS expression",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName)) {
            return self::$yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 76, 'rhs' => 0 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 4 ),
  array( 'lhs' => 100, 'rhs' => 1 ),
  array( 'lhs' => 100, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 5 ),
  array( 'lhs' => 100, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 5 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 105, 'rhs' => 0 ),
  array( 'lhs' => 105, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 0 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 2 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 2 ),
  array( 'lhs' => 111, 'rhs' => 2 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 116, 'rhs' => 3 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 109, 'rhs' => 4 ),
  array( 'lhs' => 118, 'rhs' => 0 ),
  array( 'lhs' => 118, 'rhs' => 1 ),
  array( 'lhs' => 118, 'rhs' => 3 ),
  array( 'lhs' => 118, 'rhs' => 4 ),
  array( 'lhs' => 118, 'rhs' => 6 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 4 ),
  array( 'lhs' => 95, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 4 ),
  array( 'lhs' => 95, 'rhs' => 5 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 119, 'rhs' => 0 ),
  array( 'lhs' => 119, 'rhs' => 1 ),
  array( 'lhs' => 120, 'rhs' => 2 ),
  array( 'lhs' => 120, 'rhs' => 4 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 108, 'rhs' => 2 ),
  array( 'lhs' => 108, 'rhs' => 4 ),
  array( 'lhs' => 122, 'rhs' => 1 ),
  array( 'lhs' => 122, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 5 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 117, 'rhs' => 4 ),
  array( 'lhs' => 121, 'rhs' => 1 ),
  array( 'lhs' => 121, 'rhs' => 3 ),
  array( 'lhs' => 121, 'rhs' => 4 ),
  array( 'lhs' => 121, 'rhs' => 4 ),
  array( 'lhs' => 121, 'rhs' => 6 ),
  array( 'lhs' => 123, 'rhs' => 1 ),
  array( 'lhs' => 123, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 1 ),
  array( 'lhs' => 124, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 5 ),
  array( 'lhs' => 125, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 5 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 126, 'rhs' => 2 ),
  array( 'lhs' => 126, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 1 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 127, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 128, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 2 ),
  array( 'lhs' => 129, 'rhs' => 3 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 132, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 1 ),
  array( 'lhs' => 131, 'rhs' => 3 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 2 ),
  array( 'lhs' => 130, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 4 ),
  array( 'lhs' => 130, 'rhs' => 6 ),
  array( 'lhs' => 130, 'rhs' => 6 ),
  array( 'lhs' => 94, 'rhs' => 5 ),
  array( 'lhs' => 94, 'rhs' => 7 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 94, 'rhs' => 6 ),
  array( 'lhs' => 133, 'rhs' => 1 ),
  array( 'lhs' => 133, 'rhs' => 2 ),
  array( 'lhs' => 134, 'rhs' => 3 ),
  array( 'lhs' => 134, 'rhs' => 4 ),
  array( 'lhs' => 135, 'rhs' => 3 ),
  array( 'lhs' => 135, 'rhs' => 5 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 5 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        23 => 0,
        1 => 1,
        6 => 1,
        7 => 1,
        8 => 1,
        9 => 1,
        10 => 1,
        12 => 1,
        13 => 1,
        14 => 1,
        15 => 1,
        16 => 1,
        17 => 1,
        18 => 1,
        19 => 1,
        20 => 1,
        21 => 1,
        22 => 1,
        28 => 1,
        37 => 1,
        38 => 1,
        39 => 1,
        40 => 1,
        49 => 1,
        56 => 1,
        57 => 1,
        58 => 1,
        59 => 1,
        64 => 1,
        65 => 1,
        68 => 1,
        72 => 1,
        77 => 1,
        120 => 1,
        121 => 1,
        122 => 1,
        139 => 1,
        147 => 1,
        149 => 1,
        165 => 1,
        171 => 1,
        2 => 2,
        5 => 2,
        24 => 2,
        3 => 3,
        4 => 4,
        11 => 11,
        25 => 11,
        26 => 11,
        27 => 11,
        29 => 11,
        30 => 11,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        61 => 34,
        66 => 34,
        67 => 34,
        69 => 34,
        70 => 34,
        71 => 34,
        150 => 34,
        151 => 34,
        35 => 35,
        36 => 36,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        50 => 50,
        83 => 50,
        102 => 50,
        51 => 51,
        84 => 51,
        115 => 51,
        52 => 52,
        85 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        60 => 60,
        62 => 62,
        63 => 63,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        86 => 86,
        87 => 87,
        119 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 96,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        103 => 103,
        118 => 103,
        104 => 104,
        105 => 104,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 111,
        113 => 113,
        114 => 114,
        116 => 116,
        117 => 117,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 137,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 142,
        144 => 144,
        145 => 145,
        146 => 146,
        148 => 148,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        172 => 172,
        173 => 173,
        174 => 173,
        175 => 175,
        178 => 175,
        179 => 175,
        176 => 176,
        177 => 176,
        180 => 180,
        181 => 180,
        182 => 182,
        183 => 183,
        184 => 183,
        185 => 183,
        186 => 183,
        187 => 183,
        188 => 183,
        189 => 189,
        190 => 190,
        191 => 191,
        192 => 192,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 20 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r0(){ $this->_retvalue = new yyBlock;     }
#line 2638 "/srv/http/coffeescript-php/src/grammar.php"
#line 21 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r1(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2641 "/srv/http/coffeescript-php/src/grammar.php"
#line 22 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r2(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;     }
#line 2644 "/srv/http/coffeescript-php/src/grammar.php"
#line 24 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r3(){ $this->_retvalue = yyBlock::wrap($this->yystack[$this->yyidx + 0]->minor);     }
#line 2647 "/srv/http/coffeescript-php/src/grammar.php"
#line 25 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r4(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->push($this->yystack[$this->yyidx + 0]->minor);     }
#line 2650 "/srv/http/coffeescript-php/src/grammar.php"
#line 34 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r11(){ $this->_retvalue = new yyLiteral($this->yystack[$this->yyidx + 0]->minor);     }
#line 2653 "/srv/http/coffeescript-php/src/grammar.php"
#line 59 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r31(){ $val = new yyLiteral($this->yystack[$this->yyidx + 0]->minor); $val->is_undefined($this->_retvalue === 'undefined'); $this->_retvalue = $val;     }
#line 2656 "/srv/http/coffeescript-php/src/grammar.php"
#line 61 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r32(){ $this->_retvalue = new yyAssign($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2659 "/srv/http/coffeescript-php/src/grammar.php"
#line 62 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r33(){ $this->_retvalue = new yyAssign($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2662 "/srv/http/coffeescript-php/src/grammar.php"
#line 64 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r34(){ $this->_retvalue = new yyValue($this->yystack[$this->yyidx + 0]->minor);     }
#line 2665 "/srv/http/coffeescript-php/src/grammar.php"
#line 65 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r35(){ $this->_retvalue = new yyAssign(new yyValue($this->yystack[$this->yyidx + -2]->minor), $this->yystack[$this->yyidx + 0]->minor, 'object');     }
#line 2668 "/srv/http/coffeescript-php/src/grammar.php"
#line 66 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r36(){ $this->_retvalue = new yyAssign(new yyValue($this->yystack[$this->yyidx + -4]->minor), $this->yystack[$this->yyidx + -1]->minor, 'object');     }
#line 2671 "/srv/http/coffeescript-php/src/grammar.php"
#line 73 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r41(){ $this->_retvalue = new yyReturn($this->yystack[$this->yyidx + 0]->minor);     }
#line 2674 "/srv/http/coffeescript-php/src/grammar.php"
#line 74 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r42(){ $this->_retvalue = new yyReturn;     }
#line 2677 "/srv/http/coffeescript-php/src/grammar.php"
#line 76 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r43(){ $this->_retvalue = new yyComment($this->yystack[$this->yyidx + 0]->minor);     }
#line 2680 "/srv/http/coffeescript-php/src/grammar.php"
#line 78 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r44(){ $this->_retvalue = new yyCode($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2683 "/srv/http/coffeescript-php/src/grammar.php"
#line 79 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r45(){ $this->_retvalue = new yyCode(array(), $this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2686 "/srv/http/coffeescript-php/src/grammar.php"
#line 81 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r46(){ $this->_retvalue = 'func';     }
#line 2689 "/srv/http/coffeescript-php/src/grammar.php"
#line 82 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r47(){ $this->_retvalue = 'boundfunc';     }
#line 2692 "/srv/http/coffeescript-php/src/grammar.php"
#line 84 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r48(){ $this->_retvalue = '';     }
#line 2695 "/srv/http/coffeescript-php/src/grammar.php"
#line 87 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r50(){ $this->_retvalue = array();     }
#line 2698 "/srv/http/coffeescript-php/src/grammar.php"
#line 88 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r51(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);     }
#line 2701 "/srv/http/coffeescript-php/src/grammar.php"
#line 89 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r52(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2704 "/srv/http/coffeescript-php/src/grammar.php"
#line 91 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r53(){ $this->_retvalue = new yyParam($this->yystack[$this->yyidx + 0]->minor);     }
#line 2707 "/srv/http/coffeescript-php/src/grammar.php"
#line 92 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r54(){ $this->_retvalue = new yyParam($this->yystack[$this->yyidx + -1]->minor, NULL, TRUE);     }
#line 2710 "/srv/http/coffeescript-php/src/grammar.php"
#line 93 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r55(){ $this->_retvalue = new yyParam($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2713 "/srv/http/coffeescript-php/src/grammar.php"
#line 100 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r60(){ $this->_retvalue = new yySplat($this->yystack[$this->yyidx + -1]->minor);     }
#line 2716 "/srv/http/coffeescript-php/src/grammar.php"
#line 103 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r62(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->push($this->yystack[$this->yyidx + 0]->minor);     }
#line 2719 "/srv/http/coffeescript-php/src/grammar.php"
#line 104 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r63(){ $this->_retvalue = new yyValue($this->yystack[$this->yyidx + -1]->minor, array($this->yystack[$this->yyidx + 0]->minor));     }
#line 2722 "/srv/http/coffeescript-php/src/grammar.php"
#line 117 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r73(){ $this->_retvalue = new yyAccess($this->yystack[$this->yyidx + 0]->minor);     }
#line 2725 "/srv/http/coffeescript-php/src/grammar.php"
#line 118 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r74(){ $this->_retvalue = new yyAccess($this->yystack[$this->yyidx + 0]->minor, 'soak');     }
#line 2728 "/srv/http/coffeescript-php/src/grammar.php"
#line 119 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r75(){ $this->_retvalue = new yyAccess($this->yystack[$this->yyidx + 0]->minor, 'proto');     }
#line 2731 "/srv/http/coffeescript-php/src/grammar.php"
#line 120 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r76(){ $this->_retvalue = new yyAccess(new yyLiteral('prototype'));     }
#line 2734 "/srv/http/coffeescript-php/src/grammar.php"
#line 122 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r78(){ $this->_retvalue = new yySlice($this->yystack[$this->yyidx + 0]->minor);     }
#line 2737 "/srv/http/coffeescript-php/src/grammar.php"
#line 124 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r79(){ $this->_retvalue = new yySlice($this->yystack[$this->yyidx + -1]->minor);     }
#line 2740 "/srv/http/coffeescript-php/src/grammar.php"
#line 125 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r80(){ $this->_retvalue = extend($this->yystack[$this->yyidx + 0]->minor, array('soak' => TRUE));     }
#line 2743 "/srv/http/coffeescript-php/src/grammar.php"
#line 126 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r81(){ $this->_retvalue = extend($this->yystack[$this->yyidx + 0]->minor, array('proto' => TRUE));     }
#line 2746 "/srv/http/coffeescript-php/src/grammar.php"
#line 128 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r82(){ $this->_retvalue = new yyObject($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor->generated());     }
#line 2749 "/srv/http/coffeescript-php/src/grammar.php"
#line 133 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r86(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2752 "/srv/http/coffeescript-php/src/grammar.php"
#line 134 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r87(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -2]->minor);     }
#line 2755 "/srv/http/coffeescript-php/src/grammar.php"
#line 136 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r88(){ $this->_retvalue = new yyClass;     }
#line 2758 "/srv/http/coffeescript-php/src/grammar.php"
#line 137 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r89(){ $this->_retvalue = new yyClass(NULL, NULL, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2761 "/srv/http/coffeescript-php/src/grammar.php"
#line 138 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r90(){ $this->_retvalue = new yyClass(NULL, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2764 "/srv/http/coffeescript-php/src/grammar.php"
#line 139 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r91(){ $this->_retvalue = new yyClass(NULL, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2767 "/srv/http/coffeescript-php/src/grammar.php"
#line 140 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r92(){ $this->_retvalue = new yyClass($this->yystack[$this->yyidx + 0]->minor);     }
#line 2770 "/srv/http/coffeescript-php/src/grammar.php"
#line 141 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r93(){ $this->_retvalue = new yyClass($this->yystack[$this->yyidx + -1]->minor, NULL, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2773 "/srv/http/coffeescript-php/src/grammar.php"
#line 142 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r94(){ $this->_retvalue = new yyClass($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2776 "/srv/http/coffeescript-php/src/grammar.php"
#line 143 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r95(){ $this->_retvalue = new yyClass($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2779 "/srv/http/coffeescript-php/src/grammar.php"
#line 145 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r96(){ $this->_retvalue = new yyCall($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2782 "/srv/http/coffeescript-php/src/grammar.php"
#line 147 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r98(){ $this->_retvalue = new yyCall('super', array(new yySplat(new yyLiteral('arguments'))));     }
#line 2785 "/srv/http/coffeescript-php/src/grammar.php"
#line 148 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r99(){ $this->_retvalue = new yyCall('super', $this->yystack[$this->yyidx + 0]->minor);     }
#line 2788 "/srv/http/coffeescript-php/src/grammar.php"
#line 150 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r100(){ $this->_retvalue = YY_FALSE;     }
#line 2791 "/srv/http/coffeescript-php/src/grammar.php"
#line 151 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r101(){ $this->_retvalue = YY_TRUE;     }
#line 2794 "/srv/http/coffeescript-php/src/grammar.php"
#line 154 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r103(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;     }
#line 2797 "/srv/http/coffeescript-php/src/grammar.php"
#line 156 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r104(){ $this->_retvalue = new yyValue(new yyLiteral('this'));     }
#line 2800 "/srv/http/coffeescript-php/src/grammar.php"
#line 159 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r106(){ $this->_retvalue = new yyValue(new yyLiteral('this'), array(new yyAccess($this->yystack[$this->yyidx + 0]->minor)), 'this');     }
#line 2803 "/srv/http/coffeescript-php/src/grammar.php"
#line 161 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r107(){ $this->_retvalue = new yyArr(array());     }
#line 2806 "/srv/http/coffeescript-php/src/grammar.php"
#line 162 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r108(){ $this->_retvalue = new yyArr($this->yystack[$this->yyidx + -2]->minor);     }
#line 2809 "/srv/http/coffeescript-php/src/grammar.php"
#line 164 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r109(){ $this->_retvalue = 'inclusive';     }
#line 2812 "/srv/http/coffeescript-php/src/grammar.php"
#line 165 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r110(){ $this->_retvalue = 'exclusive';     }
#line 2815 "/srv/http/coffeescript-php/src/grammar.php"
#line 167 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r111(){ $this->_retvalue = new yyRange($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor);     }
#line 2818 "/srv/http/coffeescript-php/src/grammar.php"
#line 170 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r113(){ $this->_retvalue = new yyRange($this->yystack[$this->yyidx + -2]->minor, NULL, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2821 "/srv/http/coffeescript-php/src/grammar.php"
#line 171 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r114(){ $this->_retvalue = new yyRange(NULL, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor);     }
#line 2824 "/srv/http/coffeescript-php/src/grammar.php"
#line 174 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r116(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor, array($this->yystack[$this->yyidx + 0]->minor));     }
#line 2827 "/srv/http/coffeescript-php/src/grammar.php"
#line 175 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r117(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -3]->minor, array($this->yystack[$this->yyidx + 0]->minor));     }
#line 2830 "/srv/http/coffeescript-php/src/grammar.php"
#line 183 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r123(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2833 "/srv/http/coffeescript-php/src/grammar.php"
#line 185 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r124(){ $this->_retvalue = new yyTry($this->yystack[$this->yyidx + 0]->minor);     }
#line 2836 "/srv/http/coffeescript-php/src/grammar.php"
#line 186 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r125(){ $this->_retvalue = new yyTry($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1]);      }
#line 2839 "/srv/http/coffeescript-php/src/grammar.php"
#line 187 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r126(){ $this->_retvalue = new yyTry($this->yystack[$this->yyidx + -2]->minor, NULL, NULL, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2842 "/srv/http/coffeescript-php/src/grammar.php"
#line 188 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r127(){ $this->_retvalue = new yyTry($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor[0], $this->yystack[$this->yyidx + -2]->minor[1], $this->yystack[$this->yyidx + 0]->minor);     }
#line 2845 "/srv/http/coffeescript-php/src/grammar.php"
#line 190 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r128(){ $this->_retvalue = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2848 "/srv/http/coffeescript-php/src/grammar.php"
#line 192 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r129(){ $this->_retvalue = new yyThrow($this->yystack[$this->yyidx + 0]->minor);     }
#line 2851 "/srv/http/coffeescript-php/src/grammar.php"
#line 194 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r130(){ $this->_retvalue = new yyParens($this->yystack[$this->yyidx + -1]->minor);     }
#line 2854 "/srv/http/coffeescript-php/src/grammar.php"
#line 195 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r131(){ $this->_retvalue = new yyParens($this->yystack[$this->yyidx + -2]->minor);     }
#line 2857 "/srv/http/coffeescript-php/src/grammar.php"
#line 197 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r132(){ $this->_retvalue = new yyWhile($this->yystack[$this->yyidx + 0]->minor);     }
#line 2860 "/srv/http/coffeescript-php/src/grammar.php"
#line 198 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r133(){ $this->_retvalue = new yyWhile($this->yystack[$this->yyidx + -2]->minor, array('guard' => $this->yystack[$this->yyidx + 0]->minor));     }
#line 2863 "/srv/http/coffeescript-php/src/grammar.php"
#line 199 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r134(){ $this->_retvalue = new yyWhile($this->yystack[$this->yyidx + 0]->minor, array('invert' => TRUE));     }
#line 2866 "/srv/http/coffeescript-php/src/grammar.php"
#line 200 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r135(){ $this->_retvalue = new yyWhile($this->yystack[$this->yyidx + -2]->minor, array('invert' => TRUE, 'guard' => $this->yystack[$this->yyidx + 0]->minor));     }
#line 2869 "/srv/http/coffeescript-php/src/grammar.php"
#line 202 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r136(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->add_body($this->yystack[$this->yyidx + 0]->minor);     }
#line 2872 "/srv/http/coffeescript-php/src/grammar.php"
#line 203 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r137(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor->add_body(yyBlock::wrap(array($this->yystack[$this->yyidx + -1]->minor)));     }
#line 2875 "/srv/http/coffeescript-php/src/grammar.php"
#line 207 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r140(){ $this->_retvalue = new yyWhile(new yyLiteral('true')); $this->_retvalue->add_body($this->yystack[$this->yyidx + 0]->minor);     }
#line 2878 "/srv/http/coffeescript-php/src/grammar.php"
#line 208 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r141(){ $this->_retvalue = new yyWhile(new yyLiteral('true')); $this->_retvalue->add_body(yyBlock::wrap($this->yystack[$this->yyidx + 0]->minor));     }
#line 2881 "/srv/http/coffeescript-php/src/grammar.php"
#line 210 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r142(){ $this->_retvalue = new yyFor($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2884 "/srv/http/coffeescript-php/src/grammar.php"
#line 212 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r144(){ $this->_retvalue = new yyFor($this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2887 "/srv/http/coffeescript-php/src/grammar.php"
#line 214 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r145(){ $this->_retvalue = array('source' => new yyValue($this->yystack[$this->yyidx + 0]->minor));     }
#line 2890 "/srv/http/coffeescript-php/src/grammar.php"
#line 215 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r146(){ $this->yystack[$this->yyidx + 0]->minor['own'] = $this->yystack[$this->yyidx + -1]->minor['own']; $this->yystack[$this->yyidx + 0]->minor['name'] = $this->yystack[$this->yyidx + -1]->minor[0]; $this->yystack[$this->yyidx + 0]->minor['index'] = $this->yystack[$this->yyidx + -1]->minor[1]; $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2893 "/srv/http/coffeescript-php/src/grammar.php"
#line 218 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r148(){ $this->yystack[$this->yyidx + 0]->minor['own'] = TRUE; $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2896 "/srv/http/coffeescript-php/src/grammar.php"
#line 224 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r152(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor, NULL,  'own' => NULL);     }
#line 2899 "/srv/http/coffeescript-php/src/grammar.php"
#line 225 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r153(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor,     'own' => NULL);     }
#line 2902 "/srv/http/coffeescript-php/src/grammar.php"
#line 227 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r154(){ $this->_retvalue = array('source' => $this->yystack[$this->yyidx + 0]->minor);     }
#line 2905 "/srv/http/coffeescript-php/src/grammar.php"
#line 228 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r155(){ $this->_retvalue = array('source' => $this->yystack[$this->yyidx + 0]->minor, 'object' => TRUE);     }
#line 2908 "/srv/http/coffeescript-php/src/grammar.php"
#line 229 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r156(){ $this->_retvalue = array('source' => $this->yystack[$this->yyidx + -2]->minor, 'guard' => $this->yystack[$this->yyidx + 0]->minor);     }
#line 2911 "/srv/http/coffeescript-php/src/grammar.php"
#line 230 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r157(){ $this->_retvalue = array('source' => $this->yystack[$this->yyidx + -2]->minor, 'guard' => $this->yystack[$this->yyidx + 0]->minor, 'object' => TRUE);     }
#line 2914 "/srv/http/coffeescript-php/src/grammar.php"
#line 231 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r158(){ $this->_retvalue = array('source' => $this->yystack[$this->yyidx + -2]->minor, 'step' => $this->yystack[$this->yyidx + 0]->minor);     }
#line 2917 "/srv/http/coffeescript-php/src/grammar.php"
#line 232 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r159(){ $this->_retvalue = array('source' => $this->yystack[$this->yyidx + -4]->minor, 'guard' => $this->yystack[$this->yyidx + -2]->minor, 'step' => $this->yystack[$this->yyidx + 0]->minor);     }
#line 2920 "/srv/http/coffeescript-php/src/grammar.php"
#line 233 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r160(){ $this->_retvalue = array('source' => $this->yystack[$this->yyidx + -4]->minor, 'step' => $this->yystack[$this->yyidx + -2]->minor, 'guard' => $this->yystack[$this->yyidx + 0]->minor);     }
#line 2923 "/srv/http/coffeescript-php/src/grammar.php"
#line 235 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r161(){ $this->_retvalue = new yySwitch($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2926 "/srv/http/coffeescript-php/src/grammar.php"
#line 236 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r162(){ $this->_retvalue = new yySwitch($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2929 "/srv/http/coffeescript-php/src/grammar.php"
#line 237 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r163(){ $this->_retvalue = new yySwitch(NULL, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2932 "/srv/http/coffeescript-php/src/grammar.php"
#line 238 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r164(){ $this->_retvalue = new yySwitch(NULL, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2935 "/srv/http/coffeescript-php/src/grammar.php"
#line 241 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r166(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2938 "/srv/http/coffeescript-php/src/grammar.php"
#line 243 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r167(){ $this->_retvalue = array(array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor));     }
#line 2941 "/srv/http/coffeescript-php/src/grammar.php"
#line 244 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r168(){ $this->_retvalue = array(array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor));     }
#line 2944 "/srv/http/coffeescript-php/src/grammar.php"
#line 246 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r169(){ $this->_retvalue = new yyIf($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, array('type' => $this->yystack[$this->yyidx + -2]->minor));     }
#line 2947 "/srv/http/coffeescript-php/src/grammar.php"
#line 247 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r170(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor->add_else(new yyIf($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor, array('type' => $this->yystack[$this->yyidx + -2]->minor)));     }
#line 2950 "/srv/http/coffeescript-php/src/grammar.php"
#line 250 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r172(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor->addElse($this->yystack[$this->yyidx + 0]->minor);     }
#line 2953 "/srv/http/coffeescript-php/src/grammar.php"
#line 251 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r173(){ $this->_retvalue = new yyIf($this->yystack[$this->yyidx + 0]->minor, yyBlock::wrap(array($this->yystack[$this->yyidx + -2]->minor)), array('type' => $this->yystack[$this->yyidx + -1]->minor, 'statement' => TRUE));     }
#line 2956 "/srv/http/coffeescript-php/src/grammar.php"
#line 254 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r175(){ $this->_retvalue = new yyOp($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2959 "/srv/http/coffeescript-php/src/grammar.php"
#line 255 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r176(){ $this->_retvalue = new yyOp($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); /* prec: 'UNARY'; */     }
#line 2962 "/srv/http/coffeescript-php/src/grammar.php"
#line 259 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r180(){ $this->_retvalue = new yyOp($this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor, NULL, TRUE);     }
#line 2965 "/srv/http/coffeescript-php/src/grammar.php"
#line 261 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r182(){ $this->_retvalue = new yyExistence($this->yystack[$this->yyidx + -1]->minor);     }
#line 2968 "/srv/http/coffeescript-php/src/grammar.php"
#line 262 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r183(){ $this->_retvalue = new yyOp($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2971 "/srv/http/coffeescript-php/src/grammar.php"
#line 268 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r189(){ if ($this->yystack[$this->yyidx + -1]->minor{0} === '!') { $this->_retvalue = new yyOp(substr($this->yystack[$this->yyidx + -1]->minor, 1), $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor); $this->_retvalue->invert(); } else { $this->_retvalue = new yyOp($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor); }     }
#line 2974 "/srv/http/coffeescript-php/src/grammar.php"
#line 269 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r190(){ $this->_retvalue = new yyAssign($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor);     }
#line 2977 "/srv/http/coffeescript-php/src/grammar.php"
#line 270 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r191(){ $this->_retvalue = new yyAssign($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -3]->minor);     }
#line 2980 "/srv/http/coffeescript-php/src/grammar.php"
#line 271 "/srv/http/coffeescript-php/src/grammar.y"
    function yy_r192(){ $this->_retvalue = new yyExtends($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);     }
#line 2983 "/srv/http/coffeescript-php/src/grammar.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int   $yymajor      the token number
     * @param mixed $yytokenvalue the token value
     * @param mixed ...           any extra arguments that should be passed to handlers
     *
     * @return void
     */
    function parse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(
                self::$yyTraceFILE,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL
                && !$this->yy_is_expected_token($yymajor)
            ) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(
                        self::$yyTraceFILE,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ) {
                        if (self::$yyTraceFILE) {
                            fprintf(
                                self::$yyTraceFILE,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                        ) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
